-- ===================================================
-- JALV2 PICmicro specifications for 16F628A
--
-- Created with Dev2Jal Rexx script version 0.0.29
-- Author: Rob Hamerling
-- File creation date/time: 27 Jul 2008 19:34:53
--
-- Sources of information:
--  - x:/mplab814/mplab_ide/device/PIC16F628A.dev
--  - x:/mplab814/mpasm_suite/lkr/16F628A_g.lkr
--
-- ---------------------------------------------------
-- Summary of manual changes
--
--   date        description
-- ---------    --------------------------------------
-- yyyy/mm/dd   ... text ....
--
--
--
-- ---------------------------------------------------
--
-- Device-ID: 0x1060
-- DataSheet: DS-40044
-- Programming Specifications: DS-41196
-- Vdd Range: 2.000-6.000 Nominal: 5.000
-- Vpp Range: 12.750-13.250 Default: 13.000
--
-- ===================================================
--
include ChipDef                     -- common constants
--
pragma  target  cpu   pic_14    -- (banks = 4)
pragma  target  chip  16F628A
pragma  target  bank  0x0080
pragma  target  page  0x0800
pragma  stack   8
pragma  code    2048
pragma  eeprom  0x2100,128
pragma  data    0x20-0x6F,0xA0-0xEF,0x120-0x14F
pragma  shared  0x70-0x7E,0x7F-0x7F
--
var volatile byte _pic_accum shared at { 0x7E,0xFE,0x17E,0x1FE }   -- (compiler)
var volatile byte _pic_isr_w shared at { 0x7F,0xFF,0x17F,0x1FF }   -- (compiler)
--
const word  _fuses_ct             = 1
const word  _fuse_base            = 0x2007
const word  _fuses                = 0x3FFF
--
const word  _ID_ct                = 4
const word  _ID_base[_ID_ct]      = { 0x2000,0x2001,0x2002,0x2003 }
const word  _ID[_ID_ct]           = { 0x0000,0x0000,0x0000,0x0000 }
--
-- ------------------------------------------------
var volatile byte  INDF                 at { 0x0,0x80,0x100,0x180 }
var volatile byte  _ind                 at { 0x0,0x80,0x100,0x180 }      -- (compiler)
-- ------------------------------------------------
var volatile byte  TMR0                 at { 0x1,0x101 }
-- ------------------------------------------------
var volatile byte  PCL                  at { 0x2,0x82,0x102,0x182 }
var volatile byte  _pcl                 at { 0x2,0x82,0x102,0x182 }      -- (compiler)
-- ------------------------------------------------
var volatile byte  STATUS               at { 0x3,0x83,0x103,0x183 }
var volatile bit   IRP                  at STATUS : 7
var volatile bit*2 RP                   at STATUS : 5
var volatile bit   NTO                  at STATUS : 4
var volatile bit   NPD                  at STATUS : 3
var volatile bit   Z                    at STATUS : 2
var volatile bit   DC                   at STATUS : 1
var volatile bit   C                    at STATUS : 0
var volatile byte  _status              at { 0x3,0x83,0x103,0x183 }      -- (compiler)
const        byte  _irp                 =  7      -- (compiler)
const        byte  _RP1                 =  6      -- (compiler)
const        byte  _RP0                 =  5      -- (compiler)
const        byte  _not_to              =  4      -- (compiler)
const        byte  _not_pd              =  3      -- (compiler)
const        byte  _z                   =  2      -- (compiler)
const        byte  _dc                  =  1      -- (compiler)
const        byte  _c                   =  0      -- (compiler)
-- ------------------------------------------------
var volatile byte  FSR                  at { 0x4,0x84,0x104,0x184 }
var volatile byte  _fsr                 at { 0x4,0x84,0x104,0x184 }      -- (compiler)
-- ------------------------------------------------
var volatile byte  PORTA                at { 0x5 }
--
var          byte  _port_A_shadow        = PORTA
--
procedure _port_A_flush is
  pragma inline
  PORTA = _port_A_shadow
end procedure
--
procedure portA'put (byte in x) is
  pragma inline
  _port_A_shadow = x
  _port_A_flush
end procedure
--
var  byte port_A_low
procedure port_A_low'put(byte in x) is
  _port_A_shadow = (_port_A_shadow & 0xF0) | (x & 0x0F)
  _port_A_flush
end procedure
function port_A_low'get return byte is
  return PORTA & 0x0F
end function
--
var  byte port_A_high
procedure port_A_high'put(byte in x) is
  _port_A_shadow = (_port_A_shadow & 0x0F) | (x << 4)
  _port_A_flush
end procedure
function port_A_high'get return byte is
  return PORTA >> 4
end function
--
var volatile bit   RA7                  at PORTA : 7
var volatile bit   pin_A7               at PORTA : 7
procedure pin_A7'put(bit in x) is
  pragma inline
  var bit _Tmp_Bit at _port_A_shadow : 7
  _Tmp_Bit = x
  _port_A_flush
end procedure
--
var volatile bit   RA6                  at PORTA : 6
var volatile bit   pin_A6               at PORTA : 6
procedure pin_A6'put(bit in x) is
  pragma inline
  var bit _Tmp_Bit at _port_A_shadow : 6
  _Tmp_Bit = x
  _port_A_flush
end procedure
--
var volatile bit   RA5                  at PORTA : 5
var volatile bit   pin_A5               at PORTA : 5
procedure pin_A5'put(bit in x) is
  pragma inline
  var bit _Tmp_Bit at _port_A_shadow : 5
  _Tmp_Bit = x
  _port_A_flush
end procedure
--
var volatile bit   RA4                  at PORTA : 4
var volatile bit   pin_A4               at PORTA : 4
procedure pin_A4'put(bit in x) is
  pragma inline
  var bit _Tmp_Bit at _port_A_shadow : 4
  _Tmp_Bit = x
  _port_A_flush
end procedure
--
var volatile bit   RA3                  at PORTA : 3
var volatile bit   pin_A3               at PORTA : 3
procedure pin_A3'put(bit in x) is
  pragma inline
  var bit _Tmp_Bit at _port_A_shadow : 3
  _Tmp_Bit = x
  _port_A_flush
end procedure
--
var volatile bit   RA2                  at PORTA : 2
var volatile bit   pin_A2               at PORTA : 2
procedure pin_A2'put(bit in x) is
  pragma inline
  var bit _Tmp_Bit at _port_A_shadow : 2
  _Tmp_Bit = x
  _port_A_flush
end procedure
--
var volatile bit   RA1                  at PORTA : 1
var volatile bit   pin_A1               at PORTA : 1
procedure pin_A1'put(bit in x) is
  pragma inline
  var bit _Tmp_Bit at _port_A_shadow : 1
  _Tmp_Bit = x
  _port_A_flush
end procedure
--
var volatile bit   RA0                  at PORTA : 0
var volatile bit   pin_A0               at PORTA : 0
procedure pin_A0'put(bit in x) is
  pragma inline
  var bit _Tmp_Bit at _port_A_shadow : 0
  _Tmp_Bit = x
  _port_A_flush
end procedure
--
-- ------------------------------------------------
var volatile byte  PORTB                at { 0x6,0x106 }
--
var          byte  _port_B_shadow        = PORTB
--
procedure _port_B_flush is
  pragma inline
  PORTB = _port_B_shadow
end procedure
--
procedure portB'put (byte in x) is
  pragma inline
  _port_B_shadow = x
  _port_B_flush
end procedure
--
var  byte port_B_low
procedure port_B_low'put(byte in x) is
  _port_B_shadow = (_port_B_shadow & 0xF0) | (x & 0x0F)
  _port_B_flush
end procedure
function port_B_low'get return byte is
  return PORTB & 0x0F
end function
--
var  byte port_B_high
procedure port_B_high'put(byte in x) is
  _port_B_shadow = (_port_B_shadow & 0x0F) | (x << 4)
  _port_B_flush
end procedure
function port_B_high'get return byte is
  return PORTB >> 4
end function
--
var volatile bit   RB7                  at PORTB : 7
var volatile bit   pin_B7               at PORTB : 7
procedure pin_B7'put(bit in x) is
  pragma inline
  var bit _Tmp_Bit at _port_B_shadow : 7
  _Tmp_Bit = x
  _port_B_flush
end procedure
--
var volatile bit   RB6                  at PORTB : 6
var volatile bit   pin_B6               at PORTB : 6
procedure pin_B6'put(bit in x) is
  pragma inline
  var bit _Tmp_Bit at _port_B_shadow : 6
  _Tmp_Bit = x
  _port_B_flush
end procedure
--
var volatile bit   RB5                  at PORTB : 5
var volatile bit   pin_B5               at PORTB : 5
procedure pin_B5'put(bit in x) is
  pragma inline
  var bit _Tmp_Bit at _port_B_shadow : 5
  _Tmp_Bit = x
  _port_B_flush
end procedure
--
var volatile bit   RB4                  at PORTB : 4
var volatile bit   pin_B4               at PORTB : 4
procedure pin_B4'put(bit in x) is
  pragma inline
  var bit _Tmp_Bit at _port_B_shadow : 4
  _Tmp_Bit = x
  _port_B_flush
end procedure
--
var volatile bit   RB3                  at PORTB : 3
var volatile bit   pin_B3               at PORTB : 3
procedure pin_B3'put(bit in x) is
  pragma inline
  var bit _Tmp_Bit at _port_B_shadow : 3
  _Tmp_Bit = x
  _port_B_flush
end procedure
--
var volatile bit   RB2                  at PORTB : 2
var volatile bit   pin_B2               at PORTB : 2
procedure pin_B2'put(bit in x) is
  pragma inline
  var bit _Tmp_Bit at _port_B_shadow : 2
  _Tmp_Bit = x
  _port_B_flush
end procedure
--
var volatile bit   RB1                  at PORTB : 1
var volatile bit   pin_B1               at PORTB : 1
procedure pin_B1'put(bit in x) is
  pragma inline
  var bit _Tmp_Bit at _port_B_shadow : 1
  _Tmp_Bit = x
  _port_B_flush
end procedure
--
var volatile bit   RB0                  at PORTB : 0
var volatile bit   pin_B0               at PORTB : 0
procedure pin_B0'put(bit in x) is
  pragma inline
  var bit _Tmp_Bit at _port_B_shadow : 0
  _Tmp_Bit = x
  _port_B_flush
end procedure
--
-- ------------------------------------------------
var volatile byte  PCLATH               at { 0xA,0x8A,0x10A,0x18A }
var volatile byte  _pclath              at { 0xA,0x8A,0x10A,0x18A }      -- (compiler)
-- ------------------------------------------------
var volatile byte  INTCON               at { 0xB,0x8B,0x10B,0x18B }
var volatile bit   GIE                  at INTCON : 7
var volatile bit   PEIE                 at INTCON : 6
var volatile bit   TMR0IE               at INTCON : 5
var volatile bit   T0IE                 at INTCON : 5
var volatile bit   INTE                 at INTCON : 4
var volatile bit   RBIE                 at INTCON : 3
var volatile bit   TMR0IF               at INTCON : 2
var volatile bit   T0IF                 at INTCON : 2
var volatile bit   INTF                 at INTCON : 1
var volatile bit   RBIF                 at INTCON : 0
-- ------------------------------------------------
var volatile byte  PIR1                 at { 0xC }
var volatile bit   EEIF                 at PIR1 : 7
var volatile bit   CMIF                 at PIR1 : 6
var volatile bit   RCIF                 at PIR1 : 5
var volatile bit   TXIF                 at PIR1 : 4
var volatile bit   CCP1IF               at PIR1 : 2
var volatile bit   TMR2IF               at PIR1 : 1
var volatile bit   TMR1IF               at PIR1 : 0
-- ------------------------------------------------
var volatile word  TMR1                 at { 0xE }
-- ------------------------------------------------
var volatile byte  TMR1L                at { 0xE }
-- ------------------------------------------------
var volatile byte  TMR1H                at { 0xF }
-- ------------------------------------------------
var volatile byte  T1CON                at { 0x10 }
var volatile bit*2 T1CKPS               at T1CON : 4
var volatile bit   T1OSCEN              at T1CON : 3
var volatile bit   NT1SYNC              at T1CON : 2
var volatile bit   TMR1CS               at T1CON : 1
var volatile bit   TMR1ON               at T1CON : 0
-- ------------------------------------------------
var volatile byte  TMR2                 at { 0x11 }
-- ------------------------------------------------
var volatile byte  T2CON                at { 0x12 }
var volatile bit*4 TOUTPS               at T2CON : 3
var volatile bit   TMR2ON               at T2CON : 2
var volatile bit*2 T2CKPS               at T2CON : 0
-- ------------------------------------------------
var volatile word  CCPR1                at { 0x15 }
-- ------------------------------------------------
var volatile byte  CCPR1L               at { 0x15 }
-- ------------------------------------------------
var volatile byte  CCPR1H               at { 0x16 }
-- ------------------------------------------------
var volatile byte  CCP1CON              at { 0x17 }
var volatile bit*2 CCP1CON_DC1B         at CCP1CON : 4
var volatile bit*4 CCP1CON_CCP1M        at CCP1CON : 0
-- ------------------------------------------------
var volatile byte  RCSTA                at { 0x18 }
var volatile bit   SPEN                 at RCSTA : 7
var volatile bit   RX9                  at RCSTA : 6
var volatile bit   SREN                 at RCSTA : 5
var volatile bit   CREN                 at RCSTA : 4
var volatile bit   ADDEN                at RCSTA : 3
var volatile bit   FERR                 at RCSTA : 2
var volatile bit   OERR                 at RCSTA : 1
var volatile bit   RX9D                 at RCSTA : 0
-- ------------------------------------------------
var volatile byte  TXREG                at { 0x19 }
-- ------------------------------------------------
var volatile byte  RCREG                at { 0x1A }
-- ------------------------------------------------
var volatile byte  CMCON                at { 0x1F }
var volatile bit   C2OUT                at CMCON : 7
var volatile bit   C1OUT                at CMCON : 6
var volatile bit   C2INV                at CMCON : 5
var volatile bit   C1INV                at CMCON : 4
var volatile bit   CIS                  at CMCON : 3
var volatile bit*3 CM                   at CMCON : 0
-- ------------------------------------------------
var volatile byte  OPTION_REG           at { 0x81,0x181 }
var volatile bit   NRBPU                at OPTION_REG : 7
var volatile bit   INTEDG               at OPTION_REG : 6
var volatile bit   T0CS                 at OPTION_REG : 5
var volatile bit   T0SE                 at OPTION_REG : 4
var volatile bit   PSA                  at OPTION_REG : 3
var volatile bit*3 PS                   at OPTION_REG : 0
-- ------------------------------------------------
var volatile byte  TRISA                at { 0x85 }
var volatile byte  port_A_direction     at TRISA
--
procedure port_A_low_direction'put(byte in x) is
  TRISA = (TRISA & 0xF0) | (x & 0x0F)
end procedure
function port_A_low_direction'get return byte is
  return TRISA & 0x0F
end function
--
procedure port_A_high_direction'put(byte in x) is
  TRISA = (TRISA & 0x0F) | (x << 4)
end procedure
function port_A_high_direction'get return byte is
  return (TRISA >> 4)
end function
--
var volatile bit   TRISA7               at TRISA : 7
var volatile bit   pin_A7_direction     at TRISA : 7
var volatile bit   TRISA6               at TRISA : 6
var volatile bit   pin_A6_direction     at TRISA : 6
var volatile bit   TRISA5               at TRISA : 5
var volatile bit   pin_A5_direction     at TRISA : 5
var volatile bit   TRISA4               at TRISA : 4
var volatile bit   pin_A4_direction     at TRISA : 4
var volatile bit   TRISA3               at TRISA : 3
var volatile bit   pin_A3_direction     at TRISA : 3
var volatile bit   TRISA2               at TRISA : 2
var volatile bit   pin_A2_direction     at TRISA : 2
var volatile bit   TRISA1               at TRISA : 1
var volatile bit   pin_A1_direction     at TRISA : 1
var volatile bit   TRISA0               at TRISA : 0
var volatile bit   pin_A0_direction     at TRISA : 0
-- ------------------------------------------------
var volatile byte  TRISB                at { 0x86,0x186 }
var volatile byte  port_B_direction     at TRISB
--
procedure port_B_low_direction'put(byte in x) is
  TRISB = (TRISB & 0xF0) | (x & 0x0F)
end procedure
function port_B_low_direction'get return byte is
  return TRISB & 0x0F
end function
--
procedure port_B_high_direction'put(byte in x) is
  TRISB = (TRISB & 0x0F) | (x << 4)
end procedure
function port_B_high_direction'get return byte is
  return (TRISB >> 4)
end function
--
var volatile bit   TRISB7               at TRISB : 7
var volatile bit   pin_B7_direction     at TRISB : 7
var volatile bit   TRISB6               at TRISB : 6
var volatile bit   pin_B6_direction     at TRISB : 6
var volatile bit   TRISB5               at TRISB : 5
var volatile bit   pin_B5_direction     at TRISB : 5
var volatile bit   TRISB4               at TRISB : 4
var volatile bit   pin_B4_direction     at TRISB : 4
var volatile bit   TRISB3               at TRISB : 3
var volatile bit   pin_B3_direction     at TRISB : 3
var volatile bit   TRISB2               at TRISB : 2
var volatile bit   pin_B2_direction     at TRISB : 2
var volatile bit   TRISB1               at TRISB : 1
var volatile bit   pin_B1_direction     at TRISB : 1
var volatile bit   TRISB0               at TRISB : 0
var volatile bit   pin_B0_direction     at TRISB : 0
-- ------------------------------------------------
var volatile byte  PIE1                 at { 0x8C }
var volatile bit   EEIE                 at PIE1 : 7
var volatile bit   CMIE                 at PIE1 : 6
var volatile bit   RCIE                 at PIE1 : 5
var volatile bit   TXIE                 at PIE1 : 4
var volatile bit   CCP1IE               at PIE1 : 2
var volatile bit   TMR2IE               at PIE1 : 1
var volatile bit   TMR1IE               at PIE1 : 0
-- ------------------------------------------------
var volatile byte  PCON                 at { 0x8E }
var volatile bit   OSCF                 at PCON : 3
var volatile bit   NPOR                 at PCON : 1
var volatile bit   NBOR                 at PCON : 0
-- ------------------------------------------------
var volatile byte  PR2                  at { 0x92 }
-- ------------------------------------------------
var volatile byte  TXSTA                at { 0x98 }
var volatile bit   CSRC                 at TXSTA : 7
var volatile bit   TX9                  at TXSTA : 6
var volatile bit   TXEN                 at TXSTA : 5
var volatile bit   SYNC                 at TXSTA : 4
var volatile bit   BRGH                 at TXSTA : 2
var volatile bit   TRMT                 at TXSTA : 1
var volatile bit   TX9D                 at TXSTA : 0
-- ------------------------------------------------
var volatile byte  SPBRG                at { 0x99 }
-- ------------------------------------------------
var volatile byte  EEDATA               at { 0x9A }
-- ------------------------------------------------
var volatile byte  EEADR                at { 0x9B }
-- ------------------------------------------------
var volatile byte  EECON1               at { 0x9C }
var volatile bit   WRERR                at EECON1 : 3
var volatile bit   WREN                 at EECON1 : 2
var volatile bit   WR                   at EECON1 : 1
var volatile bit   RD                   at EECON1 : 0
-- ------------------------------------------------
var volatile byte  EECON2               at { 0x9D }
-- ------------------------------------------------
var volatile byte  VRCON                at { 0x9F }
var volatile bit   VREN                 at VRCON : 7
var volatile bit   VROE                 at VRCON : 6
var volatile bit   VRR                  at VRCON : 5
var volatile bit*4 VR                   at VRCON : 0
--
-- ==================================================
--
-- Symbolic Fuse definitions
-- -------------------------
--
-- addr 0x2007
--
pragma fuse_def OSC 0x13 {
       EXTOSC_CLKOUT = 0x13
       EXTOSC_NOCLKOUT = 0x12
       INTOSC_CLKOUT = 0x11
       INTOSC_NOCLKOUT = 0x10
       EC_NOCLKOUT = 0x3
       HS = 0x2
       XT = 0x1
       LP = 0x0
       }
pragma fuse_def WDT 0x4 {
       ENABLED = 0x4
       DISABLED = 0x0
       }
pragma fuse_def PWRTE 0x8 {
       DISABLED = 0x8
       ENABLED = 0x0
       }
pragma fuse_def MCLR 0x20 {
       EXTERNAL = 0x20
       INTERNAL = 0x0
       }
pragma fuse_def BROWNOUT 0x40 {
       ENABLED = 0x40
       DISABLED = 0x0
       }
pragma fuse_def LVP 0x80 {
       ENABLED = 0x80
       DISABLED = 0x0
       }
pragma fuse_def CPD 0x100 {
       DISABLED = 0x100
       ENABLED = 0x0
       }
pragma fuse_def CP 0x2000 {
       DISABLED = 0x2000
       ENABLED = 0x0
       }
--
