-- ===================================================
-- JALV2 PICmicro specifications for 12F629
--
-- Created with Dev2Jal Rexx script version 0.0.29
-- Author: Rob Hamerling
-- File creation date/time: 27 Jul 2008 19:34:50
--
-- Sources of information:
--  - x:/mplab814/mplab_ide/device/PIC12F629.dev
--  - x:/mplab814/mpasm_suite/lkr/12F629_g.lkr
--
-- ---------------------------------------------------
-- Summary of manual changes
--
--   date        description
-- ---------    --------------------------------------
-- yyyy/mm/dd   ... text ....
--
--
--
-- ---------------------------------------------------
--
-- Device-ID: 0x0F80
-- DataSheet: DS-41190
-- Programming Specifications: DS-41173
-- Vdd Range: 2.500-5.500 Nominal: 5.000
-- Vpp Range: 12.750-13.250 Default: 13.000
--
-- ===================================================
--
include ChipDef                     -- common constants
--
pragma  target  cpu   pic_14    -- (banks = 2)
pragma  target  chip  12F629
pragma  target  bank  0x0080
pragma  target  page  0x0800
pragma  stack   8
pragma  code    1024
pragma  eeprom  0x2100,128
pragma  shared  0x20-0x5F
--
var volatile byte _pic_accum shared at { 0x5E,0xDE }   -- (compiler)
var volatile byte _pic_isr_w shared at { 0x5F,0xDF }   -- (compiler)
--
const word  _fuses_ct             = 1
const word  _fuse_base            = 0x2007
const word  _fuses                = 0x3FFF
--
const word  _ID_ct                = 4
const word  _ID_base[_ID_ct]      = { 0x2000,0x2001,0x2002,0x2003 }
const word  _ID[_ID_ct]           = { 0x0000,0x0000,0x0000,0x0000 }
--
-- ------------------------------------------------
var volatile byte  INDF                 at { 0x0,0x80 }
var volatile byte  _ind                 at { 0x0,0x80 }      -- (compiler)
-- ------------------------------------------------
var volatile byte  TMR0                 at { 0x1 }
-- ------------------------------------------------
var volatile byte  PCL                  at { 0x2,0x82 }
var volatile byte  _pcl                 at { 0x2,0x82 }      -- (compiler)
-- ------------------------------------------------
var volatile byte  STATUS               at { 0x3,0x83 }
var volatile bit   IRP                  at STATUS : 7
var volatile bit*2 RP                   at STATUS : 5
var volatile bit   NTO                  at STATUS : 4
var volatile bit   NPD                  at STATUS : 3
var volatile bit   Z                    at STATUS : 2
var volatile bit   DC                   at STATUS : 1
var volatile bit   C                    at STATUS : 0
var volatile byte  _status              at { 0x3,0x83 }      -- (compiler)
const        byte  _irp                 =  7      -- (compiler)
const        byte  _RP1                 =  6      -- (compiler)
const        byte  _RP0                 =  5      -- (compiler)
const        byte  _not_to              =  4      -- (compiler)
const        byte  _not_pd              =  3      -- (compiler)
const        byte  _z                   =  2      -- (compiler)
const        byte  _dc                  =  1      -- (compiler)
const        byte  _c                   =  0      -- (compiler)
-- ------------------------------------------------
var volatile byte  FSR                  at { 0x4,0x84 }
var volatile byte  _fsr                 at { 0x4,0x84 }      -- (compiler)
-- ------------------------------------------------
var volatile byte  GPIO                 at { 0x5 }
var volatile byte  PORTA                at GPIO
--
var          byte  _port_A_shadow        = PORTA
--
procedure _port_A_flush is
  pragma inline
  PORTA = _port_A_shadow
end procedure
--
procedure portA'put (byte in x) is
  pragma inline
  _port_A_shadow = x
  _port_A_flush
end procedure
--
var  byte port_A_low
procedure port_A_low'put(byte in x) is
  _port_A_shadow = (_port_A_shadow & 0xF0) | (x & 0x0F)
  _port_A_flush
end procedure
function port_A_low'get return byte is
  return PORTA & 0x0F
end function
--
var  byte port_A_high
procedure port_A_high'put(byte in x) is
  _port_A_shadow = (_port_A_shadow & 0x0F) | (x << 4)
  _port_A_flush
end procedure
function port_A_high'get return byte is
  return PORTA >> 4
end function
--
var volatile bit   GP5                  at GPIO : 5
var volatile bit   pin_A5               at GPIO : 5
procedure pin_A5'put(bit in x) is
  pragma inline
  var bit _Tmp_Bit at _port_A_shadow : 5
  _Tmp_Bit = x
  _port_A_flush
end procedure
--
var volatile bit   GP4                  at GPIO : 4
var volatile bit   pin_A4               at GPIO : 4
procedure pin_A4'put(bit in x) is
  pragma inline
  var bit _Tmp_Bit at _port_A_shadow : 4
  _Tmp_Bit = x
  _port_A_flush
end procedure
--
var volatile bit   GP3                  at GPIO : 3
var volatile bit   pin_A3               at GPIO : 3
procedure pin_A3'put(bit in x) is
  pragma inline
  var bit _Tmp_Bit at _port_A_shadow : 3
  _Tmp_Bit = x
  _port_A_flush
end procedure
--
var volatile bit   GP2                  at GPIO : 2
var volatile bit   pin_A2               at GPIO : 2
procedure pin_A2'put(bit in x) is
  pragma inline
  var bit _Tmp_Bit at _port_A_shadow : 2
  _Tmp_Bit = x
  _port_A_flush
end procedure
--
var volatile bit   GP1                  at GPIO : 1
var volatile bit   pin_A1               at GPIO : 1
procedure pin_A1'put(bit in x) is
  pragma inline
  var bit _Tmp_Bit at _port_A_shadow : 1
  _Tmp_Bit = x
  _port_A_flush
end procedure
--
var volatile bit   GP0                  at GPIO : 0
var volatile bit   pin_A0               at GPIO : 0
procedure pin_A0'put(bit in x) is
  pragma inline
  var bit _Tmp_Bit at _port_A_shadow : 0
  _Tmp_Bit = x
  _port_A_flush
end procedure
--
-- ------------------------------------------------
var volatile byte  PCLATH               at { 0xA,0x8A }
var volatile byte  _pclath              at { 0xA,0x8A }      -- (compiler)
-- ------------------------------------------------
var volatile byte  INTCON               at { 0xB,0x8B }
var volatile bit   GIE                  at INTCON : 7
var volatile bit   PEIE                 at INTCON : 6
var volatile bit   TMR0IE               at INTCON : 5
var volatile bit   T0IE                 at INTCON : 5
var volatile bit   INTE                 at INTCON : 4
var volatile bit   GPIE                 at INTCON : 3
var volatile bit   TMR0IF               at INTCON : 2
var volatile bit   T0IF                 at INTCON : 2
var volatile bit   INTF                 at INTCON : 1
var volatile bit   GPIF                 at INTCON : 0
-- ------------------------------------------------
var volatile byte  PIR1                 at { 0xC }
var volatile bit   EEIF                 at PIR1 : 7
var volatile bit   ADIF                 at PIR1 : 6
var volatile bit   CMIF                 at PIR1 : 3
var volatile bit   TMR1IF               at PIR1 : 0
-- ------------------------------------------------
var volatile word  TMR1                 at { 0xE }
-- ------------------------------------------------
var volatile byte  TMR1L                at { 0xE }
-- ------------------------------------------------
var volatile byte  TMR1H                at { 0xF }
-- ------------------------------------------------
var volatile byte  T1CON                at { 0x10 }
var volatile bit   TMR1GE               at T1CON : 6
var volatile bit*2 T1CKPS               at T1CON : 4
var volatile bit   T1OSCEN              at T1CON : 3
var volatile bit   NT1SYNC              at T1CON : 2
var volatile bit   TMR1CS               at T1CON : 1
var volatile bit   TMR1ON               at T1CON : 0
-- ------------------------------------------------
var volatile byte  CMCON                at { 0x19 }
var volatile bit   COUT                 at CMCON : 6
var volatile bit   CINV                 at CMCON : 4
var volatile bit   CIS                  at CMCON : 3
var volatile bit*3 CM                   at CMCON : 0
-- ------------------------------------------------
var volatile byte  OPTION_REG           at { 0x81 }
var volatile bit   NGPPU                at OPTION_REG : 7
var volatile bit   INTEDG               at OPTION_REG : 6
var volatile bit   T0CS                 at OPTION_REG : 5
var volatile bit   T0SE                 at OPTION_REG : 4
var volatile bit   PSA                  at OPTION_REG : 3
var volatile bit*3 PS                   at OPTION_REG : 0
-- ------------------------------------------------
var volatile byte  TRISIO               at { 0x85 }
var volatile byte  TRISA                at TRISIO
var volatile byte  port_A_direction     at TRISIO
--
procedure port_A_low_direction'put(byte in x) is
  TRISA = (TRISA & 0xF0) | (x & 0x0F)
end procedure
function port_A_low_direction'get return byte is
  return TRISA & 0x0F
end function
--
procedure port_A_high_direction'put(byte in x) is
  TRISA = (TRISA & 0x0F) | (x << 4)
end procedure
function port_A_high_direction'get return byte is
  return (TRISA >> 4)
end function
--
var volatile bit   TRISIO5              at TRISIO : 5
var volatile bit   TRISA5               at TRISIO : 5
var volatile bit   pin_A5_direction     at TRISIO : 5
var volatile bit   TRISIO4              at TRISIO : 4
var volatile bit   TRISA4               at TRISIO : 4
var volatile bit   pin_A4_direction     at TRISIO : 4
var volatile bit   TRISIO3              at TRISIO : 3
var volatile bit   TRISA3               at TRISIO : 3
var volatile bit   pin_A3_direction     at TRISIO : 3
var volatile bit   TRISIO2              at TRISIO : 2
var volatile bit   TRISA2               at TRISIO : 2
var volatile bit   pin_A2_direction     at TRISIO : 2
var volatile bit   TRISIO1              at TRISIO : 1
var volatile bit   TRISA1               at TRISIO : 1
var volatile bit   pin_A1_direction     at TRISIO : 1
var volatile bit   TRISIO0              at TRISIO : 0
var volatile bit   TRISA0               at TRISIO : 0
var volatile bit   pin_A0_direction     at TRISIO : 0
-- ------------------------------------------------
var volatile byte  PIE1                 at { 0x8C }
var volatile bit   EEIE                 at PIE1 : 7
var volatile bit   ADIE                 at PIE1 : 6
var volatile bit   CMIE                 at PIE1 : 3
var volatile bit   TMR1IE               at PIE1 : 0
-- ------------------------------------------------
var volatile byte  PCON                 at { 0x8E }
var volatile bit   NPOR                 at PCON : 1
var volatile bit   NBOR                 at PCON : 0
-- ------------------------------------------------
var volatile byte  OSCCAL               at { 0x90 }
var volatile bit*6 CAL                  at OSCCAL : 2
-- ------------------------------------------------
var volatile byte  WPU                  at { 0x95 }
var volatile bit   WPU5                 at WPU : 5
var volatile bit   WPU4                 at WPU : 4
var volatile bit   WPU2                 at WPU : 2
var volatile bit   WPU1                 at WPU : 1
var volatile bit   WPU0                 at WPU : 0
-- ------------------------------------------------
var volatile byte  IOC                  at { 0x96 }
var volatile bit   IOC5                 at IOC : 5
var volatile bit   IOC4                 at IOC : 4
var volatile bit   IOC3                 at IOC : 3
var volatile bit   IOC2                 at IOC : 2
var volatile bit   IOC1                 at IOC : 1
var volatile bit   IOC0                 at IOC : 0
-- ------------------------------------------------
var volatile byte  VRCON                at { 0x99 }
var volatile bit   VREN                 at VRCON : 7
var volatile bit   VRR                  at VRCON : 5
var volatile bit*4 VR                   at VRCON : 0
-- ------------------------------------------------
var volatile byte  EEDATA               at { 0x9A }
-- ------------------------------------------------
var volatile byte  EEADR                at { 0x9B }
-- ------------------------------------------------
var volatile byte  EECON1               at { 0x9C }
var volatile bit   WRERR                at EECON1 : 3
var volatile bit   WREN                 at EECON1 : 2
var volatile bit   WR                   at EECON1 : 1
var volatile bit   RD                   at EECON1 : 0
-- ------------------------------------------------
var volatile byte  EECON2               at { 0x9D }
--
-- ==================================================
--
-- Symbolic Fuse definitions
-- -------------------------
--
-- addr 0x2007
--
pragma fuse_def OSC 0x7 {
       EXTOSC_CLKOUT = 0x7
       EXTOSC_NOCLKOUT = 0x6
       INTOSC_CLKOUT = 0x5
       INTOSC_NOCLKOUT = 0x4
       EC_NOCLKOUT = 0x3
       HS = 0x2
       XT = 0x1
       LP = 0x0
       }
pragma fuse_def WDT 0x8 {
       ENABLED = 0x8
       DISABLED = 0x0
       }
pragma fuse_def PWRTE 0x10 {
       DISABLED = 0x10
       ENABLED = 0x0
       }
pragma fuse_def MCLR 0x20 {
       EXTERNAL = 0x20
       INTERNAL = 0x0
       }
pragma fuse_def BROWNOUT 0x40 {
       ENABLED = 0x40
       DISABLED = 0x0
       }
pragma fuse_def CP 0x80 {
       DISABLED = 0x80
       ENABLED = 0x0
       }
pragma fuse_def CPD 0x100 {
       DISABLED = 0x100
       ENABLED = 0x0
       }
pragma fuse_def BG 0x3000 {
       HIGHEST_BANDGAP_VOLTAGE = 0x3000
       MIDDLE_BANDGAP_VOLTAGE = 0x2000
       MIDDLE_BANDGAP_VOLTAGE = 0x1000
       LOWEST_BANDGAP_VOLTAGE = 0x0
       }
--
