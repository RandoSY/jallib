-- ===================================================
-- JALV2 PICmicro specifications for 12F519
--
-- Created with Dev2Jal Rexx script version 0.0.29
-- Author: Rob Hamerling
-- File creation date/time: 27 Jul 2008 19:34:50
--
-- Sources of information:
--  - x:/mplab814/mplab_ide/device/PIC12F519.dev
--  - x:/mplab814/mpasm_suite/lkr/12F519_g.lkr
--
-- ---------------------------------------------------
-- Summary of manual changes
--
--   date        description
-- ---------    --------------------------------------
-- yyyy/mm/dd   ... text ....
--
--
--
-- ---------------------------------------------------
--
-- Vdd Range: 2.000-5.500 Nominal: 5.000
-- Vpp Range: 10.000-12.000 Default: 11.000
--
-- ===================================================
--
include ChipDef                     -- common constants
--
pragma  target  cpu   pic_12    -- (banks = 2)
pragma  target  chip  12F519
pragma  target  bank  0x0020
pragma  target  page  0x0200
pragma  stack   2
pragma  code    1024
pragma  data    0x10-0x1F,0x30-0x3F
pragma  shared  0x07-0x0F
--
var volatile byte _pic_accum shared at { 0xE,0x2E }   -- (compiler)
var volatile byte _pic_isr_w shared at { 0xF,0x2F }   -- (compiler)
--
const word  _fuses_ct             = 1
const word  _fuse_base            = 0xFFF
const word  _fuses                = 0xFFF
--
const word  _ID_ct                = 4
const word  _ID_base[_ID_ct]      = { 0x0440,0x0441,0x0442,0x0443 }
const word  _ID[_ID_ct]           = { 0x0000,0x0000,0x0000,0x0000 }
--
-- ------------------------------------------------
var volatile byte  INDF                 at { 0x0,0x20 }
var volatile byte  _ind                 at { 0x0,0x20 }      -- (compiler)
-- ------------------------------------------------
var volatile byte  TMR0                 at { 0x1 }
-- ------------------------------------------------
var volatile byte  PCL                  at { 0x2 }
var volatile byte  _pcl                 at { 0x2 }      -- (compiler)
-- ------------------------------------------------
var volatile byte  STATUS               at { 0x3 }
var volatile bit   RBWUF                at STATUS : 7
var volatile bit   PA0                  at STATUS : 5
var volatile bit   NTO                  at STATUS : 4
var volatile bit   NPD                  at STATUS : 3
var volatile bit   Z                    at STATUS : 2
var volatile bit   DC                   at STATUS : 1
var volatile bit   C                    at STATUS : 0
var volatile byte  _status              at { 0x3 }      -- (compiler)
const        byte  _rbwuf               =  7      -- (compiler)
const        byte  _pa0                 =  5      -- (compiler)
const        byte  _not_to              =  4      -- (compiler)
const        byte  _not_pd              =  3      -- (compiler)
const        byte  _z                   =  2      -- (compiler)
const        byte  _dc                  =  1      -- (compiler)
const        byte  _c                   =  0      -- (compiler)
-- ------------------------------------------------
var volatile byte  FSR                  at { 0x4 }
var volatile byte  _fsr                 at { 0x4 }      -- (compiler)
-- ------------------------------------------------
var volatile byte  OSCCAL               at { 0x5 }
var volatile bit*7 CAL                  at OSCCAL : 1
-- ------------------------------------------------
var volatile byte  PORTB                at { 0x6 }
--
var          byte  _port_B_shadow        = PORTB
--
procedure _port_B_flush is
  pragma inline
  PORTB = _port_B_shadow
end procedure
--
procedure portB'put (byte in x) is
  pragma inline
  _port_B_shadow = x
  _port_B_flush
end procedure
--
var  byte port_B_low
procedure port_B_low'put(byte in x) is
  _port_B_shadow = (_port_B_shadow & 0xF0) | (x & 0x0F)
  _port_B_flush
end procedure
function port_B_low'get return byte is
  return PORTB & 0x0F
end function
--
var  byte port_B_high
procedure port_B_high'put(byte in x) is
  _port_B_shadow = (_port_B_shadow & 0x0F) | (x << 4)
  _port_B_flush
end procedure
function port_B_high'get return byte is
  return PORTB >> 4
end function
--
var volatile bit   RB5                  at PORTB : 5
var volatile bit   pin_B5               at PORTB : 5
procedure pin_B5'put(bit in x) is
  pragma inline
  var bit _Tmp_Bit at _port_B_shadow : 5
  _Tmp_Bit = x
  _port_B_flush
end procedure
--
var volatile bit   RB4                  at PORTB : 4
var volatile bit   pin_B4               at PORTB : 4
procedure pin_B4'put(bit in x) is
  pragma inline
  var bit _Tmp_Bit at _port_B_shadow : 4
  _Tmp_Bit = x
  _port_B_flush
end procedure
--
var volatile bit   RB3                  at PORTB : 3
var volatile bit   pin_B3               at PORTB : 3
procedure pin_B3'put(bit in x) is
  pragma inline
  var bit _Tmp_Bit at _port_B_shadow : 3
  _Tmp_Bit = x
  _port_B_flush
end procedure
--
var volatile bit   RB2                  at PORTB : 2
var volatile bit   pin_B2               at PORTB : 2
procedure pin_B2'put(bit in x) is
  pragma inline
  var bit _Tmp_Bit at _port_B_shadow : 2
  _Tmp_Bit = x
  _port_B_flush
end procedure
--
var volatile bit   RB1                  at PORTB : 1
var volatile bit   pin_B1               at PORTB : 1
procedure pin_B1'put(bit in x) is
  pragma inline
  var bit _Tmp_Bit at _port_B_shadow : 1
  _Tmp_Bit = x
  _port_B_flush
end procedure
--
var volatile bit   RB0                  at PORTB : 0
var volatile bit   pin_B0               at PORTB : 0
procedure pin_B0'put(bit in x) is
  pragma inline
  var bit _Tmp_Bit at _port_B_shadow : 0
  _Tmp_Bit = x
  _port_B_flush
end procedure
--
-- ------------------------------------------------
var volatile byte  EECON                at { 0x21 }
var volatile bit   FREE                 at EECON : 4
var volatile bit   WRERR                at EECON : 3
var volatile bit   WREN                 at EECON : 2
var volatile bit   WR                   at EECON : 1
var volatile bit   RD                   at EECON : 0
-- ------------------------------------------------
var volatile byte  EEDATA               at { 0x25 }
-- ------------------------------------------------
var volatile byte  EEADR                at { 0x26 }
--
-- ==================================================
--
-- Symbolic Fuse definitions
-- -------------------------
--
-- addr 0xFFF
--
pragma fuse_def OSC 0x3 {
       LP = 0x0
       XT = 0x1
       INTOSC_NOCLKOUT = 0x2
       EXTOSC_NOCLKOUT = 0x3
       }
pragma fuse_def WDT 0x4 {
       ENABLED = 0x4
       DISABLED = 0x0
       }
pragma fuse_def CP 0x8 {
       DISABLED = 0x8
       ENABLED = 0x0
       }
pragma fuse_def MCLR 0x10 {
       EXTERNAL = 0x10
       INTERNAL = 0x0
       }
pragma fuse_def IOSCFS 0x20 {
       _8_MHZ_INTOSC_SPEED = 0x20
       _4_MHZ_INTOSC_SPEED = 0x0
       }
pragma fuse_def CPSW 0x40 {
       DISABLED = 0x40
       ENABLED = 0x0
       }
--
