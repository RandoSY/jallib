-- ===================================================
-- Title: JalV2 device include file for pic16f747
--
-- Author: Rob Hamerling, Copyright (c) 2008..2008, all rights reserved.
--
-- Adapted-by:
--
-- Compiler: >=2.4g
--
-- This file is part of jallib  (http://jallib.googlecode.com)
-- Released under the BSD license (http://www.opensource.org/licenses/bsd-license.php)
--
-- Description: Device include file for pic16f747, containing:
--                - Declaration of ports and pins of the chip.
--                - Procedures for shadowing of ports and pins
--                  to circumvent the read-modify-write problem.
--                - Symbolic definitions for config bits (fuses)
--                - Some device dependent procedures for common
--                  operations, like:
--                   . enable-digital-io.
--
-- Sources:
--  - x:/mplab814/mplab_ide/device/pic16f747.dev
--  - x:/mplab814/mpasm_suite/lkr/16f747_g.lkr
--
-- Notes:
--  - Created with Dev2Jal Rexx script version 0.0.39
--  - File creation date/time: 12 Aug 2008 21:44:25.
--
-- ===================================================
--
-- Device-ID: 0x0BE0
-- DataSheet: DS-30498
-- Programming Specifications: DS-30492
-- Vdd Range: 2.000-5.500 Nominal: 5.000
-- Vpp Range: 12.500-13.500 Default: 13.000
--
-- ---------------------------------------------------
--
include chipdef                     -- common constants
--
pragma  target  cpu   pic_14    -- (banks = 4)
pragma  target  chip  16f747
pragma  target  bank  0x0080
pragma  target  page  0x0800
pragma  stack   8
pragma  code    4096
pragma  data    0x20-0x6F,0xA0-0xEF,0x110-0x16F,0x190-0x1EF
pragma  shared  0x70-0x7F
--
var volatile byte _pic_accum shared at { 0x7E,0xFE,0x17E,0x1FE }   -- (compiler)
var volatile byte _pic_isr_w shared at { 0x7F,0xFF,0x17F,0x1FF }   -- (compiler)
--
const word  _fuses_ct             = 2
const word  _fuse_base[_fuses_ct] = { 0x2007,0x2008 }
const word  _fuses[_fuses_ct]     = { 0x3FFF,0x3FFF }
--
const word  _ID_ct                = 4
const word  _ID_base[_ID_ct]      = { 0x2000,0x2001,0x2002,0x2003 }
const word  _ID[_ID_ct]           = { 0x0000,0x0000,0x0000,0x0000 }
--
-- ------------------------------------------------
var volatile byte  INDF                 at { 0x0,0x80,0x100,0x180 }
var volatile byte  _ind                 at { 0x0,0x80,0x100,0x180 }      -- (compiler)
-- ------------------------------------------------
var volatile byte  TMR0                 at { 0x1,0x101 }
-- ------------------------------------------------
var volatile byte  PCL                  at { 0x2,0x82,0x102,0x182 }
var volatile byte  _pcl                 at { 0x2,0x82,0x102,0x182 }      -- (compiler)
-- ------------------------------------------------
var volatile byte  STATUS               at { 0x3,0x83,0x103,0x183 }
var volatile bit   STATUS_IRP           at STATUS : 7
var volatile bit*2 STATUS_RP            at STATUS : 5
var volatile bit   STATUS_NTO           at STATUS : 4
var volatile bit   STATUS_NPD           at STATUS : 3
var volatile bit   STATUS_Z             at STATUS : 2
var volatile bit   STATUS_DC            at STATUS : 1
var volatile bit   STATUS_C             at STATUS : 0
var volatile byte  _status              at { 0x3,0x83,0x103,0x183 }      -- (compiler)
const        byte  _irp                 =  7      -- (compiler)
const        byte  _RP1                 =  6      -- (compiler)
const        byte  _RP0                 =  5      -- (compiler)
const        byte  _not_to              =  4      -- (compiler)
const        byte  _not_pd              =  3      -- (compiler)
const        byte  _z                   =  2      -- (compiler)
const        byte  _dc                  =  1      -- (compiler)
const        byte  _c                   =  0      -- (compiler)
-- ------------------------------------------------
var volatile byte  FSR                  at { 0x4,0x84,0x104,0x184 }
var volatile byte  _fsr                 at { 0x4,0x84,0x104,0x184 }      -- (compiler)
-- ------------------------------------------------
var volatile byte  PORTA                at { 0x5 }
--
var          byte  _PORTA_SHADOW        = PORTA
--
procedure _portA_flush is
  pragma inline
  PORTA = _PORTA_SHADOW
end procedure
--
procedure PORTA'put (byte in x) is
  pragma inline
  _PORTA_SHADOW = x
  _portA_flush
end procedure
--
var  byte PORTA_LOW
procedure PORTA_LOW'put(byte in x) is
  _PORTA_SHADOW = (_PORTA_SHADOW & 0xF0) | (x & 0x0F)
  _portA_flush
end procedure
function PORTA_LOW'get return byte is
  return PORTA & 0x0F
end function
--
var  byte PORTA_HIGH
procedure PORTA_HIGH'put(byte in x) is
  _PORTA_SHADOW = (_PORTA_SHADOW & 0x0F) | (x << 4)
  _portA_flush
end procedure
function PORTA_HIGH'get return byte is
  return PORTA >> 4
end function
--
var volatile bit   PORTA_RA7            at PORTA : 7
var volatile bit   PIN_A7               at PORTA : 7
procedure PIN_A7'put(bit in x) is
  pragma inline
  var bit _Tmp_Bit at _PORTA_SHADOW : 7
  _Tmp_Bit = x
  _portA_flush
end procedure
--
var volatile bit   PORTA_RA6            at PORTA : 6
var volatile bit   PIN_A6               at PORTA : 6
procedure PIN_A6'put(bit in x) is
  pragma inline
  var bit _Tmp_Bit at _PORTA_SHADOW : 6
  _Tmp_Bit = x
  _portA_flush
end procedure
--
var volatile bit   PORTA_RA5            at PORTA : 5
var volatile bit   PIN_A5               at PORTA : 5
procedure PIN_A5'put(bit in x) is
  pragma inline
  var bit _Tmp_Bit at _PORTA_SHADOW : 5
  _Tmp_Bit = x
  _portA_flush
end procedure
--
var volatile bit   PORTA_RA4            at PORTA : 4
var volatile bit   PIN_A4               at PORTA : 4
procedure PIN_A4'put(bit in x) is
  pragma inline
  var bit _Tmp_Bit at _PORTA_SHADOW : 4
  _Tmp_Bit = x
  _portA_flush
end procedure
--
var volatile bit   PORTA_RA3            at PORTA : 3
var volatile bit   PIN_A3               at PORTA : 3
procedure PIN_A3'put(bit in x) is
  pragma inline
  var bit _Tmp_Bit at _PORTA_SHADOW : 3
  _Tmp_Bit = x
  _portA_flush
end procedure
--
var volatile bit   PORTA_RA2            at PORTA : 2
var volatile bit   PIN_A2               at PORTA : 2
procedure PIN_A2'put(bit in x) is
  pragma inline
  var bit _Tmp_Bit at _PORTA_SHADOW : 2
  _Tmp_Bit = x
  _portA_flush
end procedure
--
var volatile bit   PORTA_RA1            at PORTA : 1
var volatile bit   PIN_A1               at PORTA : 1
procedure PIN_A1'put(bit in x) is
  pragma inline
  var bit _Tmp_Bit at _PORTA_SHADOW : 1
  _Tmp_Bit = x
  _portA_flush
end procedure
--
var volatile bit   PORTA_RA0            at PORTA : 0
var volatile bit   PIN_A0               at PORTA : 0
procedure PIN_A0'put(bit in x) is
  pragma inline
  var bit _Tmp_Bit at _PORTA_SHADOW : 0
  _Tmp_Bit = x
  _portA_flush
end procedure
--
-- ------------------------------------------------
var volatile byte  PORTB                at { 0x6,0x106 }
--
var          byte  _PORTB_SHADOW        = PORTB
--
procedure _portB_flush is
  pragma inline
  PORTB = _PORTB_SHADOW
end procedure
--
procedure PORTB'put (byte in x) is
  pragma inline
  _PORTB_SHADOW = x
  _portB_flush
end procedure
--
var  byte PORTB_LOW
procedure PORTB_LOW'put(byte in x) is
  _PORTB_SHADOW = (_PORTB_SHADOW & 0xF0) | (x & 0x0F)
  _portB_flush
end procedure
function PORTB_LOW'get return byte is
  return PORTB & 0x0F
end function
--
var  byte PORTB_HIGH
procedure PORTB_HIGH'put(byte in x) is
  _PORTB_SHADOW = (_PORTB_SHADOW & 0x0F) | (x << 4)
  _portB_flush
end procedure
function PORTB_HIGH'get return byte is
  return PORTB >> 4
end function
--
var volatile bit   PORTB_RB7            at PORTB : 7
var volatile bit   PIN_B7               at PORTB : 7
procedure PIN_B7'put(bit in x) is
  pragma inline
  var bit _Tmp_Bit at _PORTB_SHADOW : 7
  _Tmp_Bit = x
  _portB_flush
end procedure
--
var volatile bit   PORTB_RB6            at PORTB : 6
var volatile bit   PIN_B6               at PORTB : 6
procedure PIN_B6'put(bit in x) is
  pragma inline
  var bit _Tmp_Bit at _PORTB_SHADOW : 6
  _Tmp_Bit = x
  _portB_flush
end procedure
--
var volatile bit   PORTB_RB5            at PORTB : 5
var volatile bit   PIN_B5               at PORTB : 5
procedure PIN_B5'put(bit in x) is
  pragma inline
  var bit _Tmp_Bit at _PORTB_SHADOW : 5
  _Tmp_Bit = x
  _portB_flush
end procedure
--
var volatile bit   PORTB_RB4            at PORTB : 4
var volatile bit   PIN_B4               at PORTB : 4
procedure PIN_B4'put(bit in x) is
  pragma inline
  var bit _Tmp_Bit at _PORTB_SHADOW : 4
  _Tmp_Bit = x
  _portB_flush
end procedure
--
var volatile bit   PORTB_RB3            at PORTB : 3
var volatile bit   PIN_B3               at PORTB : 3
procedure PIN_B3'put(bit in x) is
  pragma inline
  var bit _Tmp_Bit at _PORTB_SHADOW : 3
  _Tmp_Bit = x
  _portB_flush
end procedure
--
var volatile bit   PORTB_RB2            at PORTB : 2
var volatile bit   PIN_B2               at PORTB : 2
procedure PIN_B2'put(bit in x) is
  pragma inline
  var bit _Tmp_Bit at _PORTB_SHADOW : 2
  _Tmp_Bit = x
  _portB_flush
end procedure
--
var volatile bit   PORTB_RB1            at PORTB : 1
var volatile bit   PIN_B1               at PORTB : 1
procedure PIN_B1'put(bit in x) is
  pragma inline
  var bit _Tmp_Bit at _PORTB_SHADOW : 1
  _Tmp_Bit = x
  _portB_flush
end procedure
--
var volatile bit   PORTB_RB0            at PORTB : 0
var volatile bit   PIN_B0               at PORTB : 0
procedure PIN_B0'put(bit in x) is
  pragma inline
  var bit _Tmp_Bit at _PORTB_SHADOW : 0
  _Tmp_Bit = x
  _portB_flush
end procedure
--
-- ------------------------------------------------
var volatile byte  PORTC                at { 0x7 }
--
var          byte  _PORTC_SHADOW        = PORTC
--
procedure _portC_flush is
  pragma inline
  PORTC = _PORTC_SHADOW
end procedure
--
procedure PORTC'put (byte in x) is
  pragma inline
  _PORTC_SHADOW = x
  _portC_flush
end procedure
--
var  byte PORTC_LOW
procedure PORTC_LOW'put(byte in x) is
  _PORTC_SHADOW = (_PORTC_SHADOW & 0xF0) | (x & 0x0F)
  _portC_flush
end procedure
function PORTC_LOW'get return byte is
  return PORTC & 0x0F
end function
--
var  byte PORTC_HIGH
procedure PORTC_HIGH'put(byte in x) is
  _PORTC_SHADOW = (_PORTC_SHADOW & 0x0F) | (x << 4)
  _portC_flush
end procedure
function PORTC_HIGH'get return byte is
  return PORTC >> 4
end function
--
var volatile bit   PORTC_RC7            at PORTC : 7
var volatile bit   PIN_C7               at PORTC : 7
procedure PIN_C7'put(bit in x) is
  pragma inline
  var bit _Tmp_Bit at _PORTC_SHADOW : 7
  _Tmp_Bit = x
  _portC_flush
end procedure
--
var volatile bit   PORTC_RC6            at PORTC : 6
var volatile bit   PIN_C6               at PORTC : 6
procedure PIN_C6'put(bit in x) is
  pragma inline
  var bit _Tmp_Bit at _PORTC_SHADOW : 6
  _Tmp_Bit = x
  _portC_flush
end procedure
--
var volatile bit   PORTC_RC5            at PORTC : 5
var volatile bit   PIN_C5               at PORTC : 5
procedure PIN_C5'put(bit in x) is
  pragma inline
  var bit _Tmp_Bit at _PORTC_SHADOW : 5
  _Tmp_Bit = x
  _portC_flush
end procedure
--
var volatile bit   PORTC_RC4            at PORTC : 4
var volatile bit   PIN_C4               at PORTC : 4
procedure PIN_C4'put(bit in x) is
  pragma inline
  var bit _Tmp_Bit at _PORTC_SHADOW : 4
  _Tmp_Bit = x
  _portC_flush
end procedure
--
var volatile bit   PORTC_RC3            at PORTC : 3
var volatile bit   PIN_C3               at PORTC : 3
procedure PIN_C3'put(bit in x) is
  pragma inline
  var bit _Tmp_Bit at _PORTC_SHADOW : 3
  _Tmp_Bit = x
  _portC_flush
end procedure
--
var volatile bit   PORTC_RC2            at PORTC : 2
var volatile bit   PIN_C2               at PORTC : 2
procedure PIN_C2'put(bit in x) is
  pragma inline
  var bit _Tmp_Bit at _PORTC_SHADOW : 2
  _Tmp_Bit = x
  _portC_flush
end procedure
--
var volatile bit   PORTC_RC1            at PORTC : 1
var volatile bit   PIN_C1               at PORTC : 1
procedure PIN_C1'put(bit in x) is
  pragma inline
  var bit _Tmp_Bit at _PORTC_SHADOW : 1
  _Tmp_Bit = x
  _portC_flush
end procedure
--
var volatile bit   PORTC_RC0            at PORTC : 0
var volatile bit   PIN_C0               at PORTC : 0
procedure PIN_C0'put(bit in x) is
  pragma inline
  var bit _Tmp_Bit at _PORTC_SHADOW : 0
  _Tmp_Bit = x
  _portC_flush
end procedure
--
-- ------------------------------------------------
var volatile byte  PORTD                at { 0x8 }
--
var          byte  _PORTD_SHADOW        = PORTD
--
procedure _portD_flush is
  pragma inline
  PORTD = _PORTD_SHADOW
end procedure
--
procedure PORTD'put (byte in x) is
  pragma inline
  _PORTD_SHADOW = x
  _portD_flush
end procedure
--
var  byte PORTD_LOW
procedure PORTD_LOW'put(byte in x) is
  _PORTD_SHADOW = (_PORTD_SHADOW & 0xF0) | (x & 0x0F)
  _portD_flush
end procedure
function PORTD_LOW'get return byte is
  return PORTD & 0x0F
end function
--
var  byte PORTD_HIGH
procedure PORTD_HIGH'put(byte in x) is
  _PORTD_SHADOW = (_PORTD_SHADOW & 0x0F) | (x << 4)
  _portD_flush
end procedure
function PORTD_HIGH'get return byte is
  return PORTD >> 4
end function
--
var volatile bit   PORTD_RD7            at PORTD : 7
var volatile bit   PIN_D7               at PORTD : 7
procedure PIN_D7'put(bit in x) is
  pragma inline
  var bit _Tmp_Bit at _PORTD_SHADOW : 7
  _Tmp_Bit = x
  _portD_flush
end procedure
--
var volatile bit   PORTD_RD6            at PORTD : 6
var volatile bit   PIN_D6               at PORTD : 6
procedure PIN_D6'put(bit in x) is
  pragma inline
  var bit _Tmp_Bit at _PORTD_SHADOW : 6
  _Tmp_Bit = x
  _portD_flush
end procedure
--
var volatile bit   PORTD_RD5            at PORTD : 5
var volatile bit   PIN_D5               at PORTD : 5
procedure PIN_D5'put(bit in x) is
  pragma inline
  var bit _Tmp_Bit at _PORTD_SHADOW : 5
  _Tmp_Bit = x
  _portD_flush
end procedure
--
var volatile bit   PORTD_RD4            at PORTD : 4
var volatile bit   PIN_D4               at PORTD : 4
procedure PIN_D4'put(bit in x) is
  pragma inline
  var bit _Tmp_Bit at _PORTD_SHADOW : 4
  _Tmp_Bit = x
  _portD_flush
end procedure
--
var volatile bit   PORTD_RD3            at PORTD : 3
var volatile bit   PIN_D3               at PORTD : 3
procedure PIN_D3'put(bit in x) is
  pragma inline
  var bit _Tmp_Bit at _PORTD_SHADOW : 3
  _Tmp_Bit = x
  _portD_flush
end procedure
--
var volatile bit   PORTD_RD2            at PORTD : 2
var volatile bit   PIN_D2               at PORTD : 2
procedure PIN_D2'put(bit in x) is
  pragma inline
  var bit _Tmp_Bit at _PORTD_SHADOW : 2
  _Tmp_Bit = x
  _portD_flush
end procedure
--
var volatile bit   PORTD_RD1            at PORTD : 1
var volatile bit   PIN_D1               at PORTD : 1
procedure PIN_D1'put(bit in x) is
  pragma inline
  var bit _Tmp_Bit at _PORTD_SHADOW : 1
  _Tmp_Bit = x
  _portD_flush
end procedure
--
var volatile bit   PORTD_RD0            at PORTD : 0
var volatile bit   PIN_D0               at PORTD : 0
procedure PIN_D0'put(bit in x) is
  pragma inline
  var bit _Tmp_Bit at _PORTD_SHADOW : 0
  _Tmp_Bit = x
  _portD_flush
end procedure
--
-- ------------------------------------------------
var volatile byte  PORTE                at { 0x9 }
--
var          byte  _PORTE_SHADOW        = PORTE
--
procedure _portE_flush is
  pragma inline
  PORTE = _PORTE_SHADOW
end procedure
--
procedure PORTE'put (byte in x) is
  pragma inline
  _PORTE_SHADOW = x
  _portE_flush
end procedure
--
var  byte PORTE_LOW
procedure PORTE_LOW'put(byte in x) is
  _PORTE_SHADOW = (_PORTE_SHADOW & 0xF0) | (x & 0x0F)
  _portE_flush
end procedure
function PORTE_LOW'get return byte is
  return PORTE & 0x0F
end function
--
var  byte PORTE_HIGH
procedure PORTE_HIGH'put(byte in x) is
  _PORTE_SHADOW = (_PORTE_SHADOW & 0x0F) | (x << 4)
  _portE_flush
end procedure
function PORTE_HIGH'get return byte is
  return PORTE >> 4
end function
--
var volatile bit   PORTE_RE3            at PORTE : 3
var volatile bit   PIN_E3               at PORTE : 3
procedure PIN_E3'put(bit in x) is
  pragma inline
  var bit _Tmp_Bit at _PORTE_SHADOW : 3
  _Tmp_Bit = x
  _portE_flush
end procedure
--
var volatile bit   PORTE_RE2            at PORTE : 2
var volatile bit   PIN_E2               at PORTE : 2
procedure PIN_E2'put(bit in x) is
  pragma inline
  var bit _Tmp_Bit at _PORTE_SHADOW : 2
  _Tmp_Bit = x
  _portE_flush
end procedure
--
var volatile bit   PORTE_RE1            at PORTE : 1
var volatile bit   PIN_E1               at PORTE : 1
procedure PIN_E1'put(bit in x) is
  pragma inline
  var bit _Tmp_Bit at _PORTE_SHADOW : 1
  _Tmp_Bit = x
  _portE_flush
end procedure
--
var volatile bit   PORTE_RE0            at PORTE : 0
var volatile bit   PIN_E0               at PORTE : 0
procedure PIN_E0'put(bit in x) is
  pragma inline
  var bit _Tmp_Bit at _PORTE_SHADOW : 0
  _Tmp_Bit = x
  _portE_flush
end procedure
--
-- ------------------------------------------------
var volatile byte  PCLATH               at { 0xA,0x8A,0x10A,0x18A }
var volatile byte  _pclath              at { 0xA,0x8A,0x10A,0x18A }      -- (compiler)
-- ------------------------------------------------
var volatile byte  INTCON               at { 0xB,0x8B,0x10B,0x18B }
var volatile bit   INTCON_GIE           at INTCON : 7
var volatile bit   INTCON_PEIE          at INTCON : 6
var volatile bit   INTCON_TMR0IE        at INTCON : 5
var volatile bit   INTCON_T0IE          at INTCON : 5
var volatile bit   INTCON_INTE          at INTCON : 4
var volatile bit   INTCON_RBIE          at INTCON : 3
var volatile bit   INTCON_TMR0IF        at INTCON : 2
var volatile bit   INTCON_T0IF          at INTCON : 2
var volatile bit   INTCON_INTF          at INTCON : 1
var volatile bit   INTCON_RBIF          at INTCON : 0
-- ------------------------------------------------
var volatile byte  PIR1                 at { 0xC }
var volatile bit   PIR1_PSPIF           at PIR1 : 7
var volatile bit   PIR1_ADIF            at PIR1 : 6
var volatile bit   PIR1_RCIF            at PIR1 : 5
var volatile bit   PIR1_TXIF            at PIR1 : 4
var volatile bit   PIR1_SSPIF           at PIR1 : 3
var volatile bit   PIR1_CCP1IF          at PIR1 : 2
var volatile bit   PIR1_TMR2IF          at PIR1 : 1
var volatile bit   PIR1_TMR1IF          at PIR1 : 0
-- ------------------------------------------------
var volatile byte  PIR2                 at { 0xD }
var volatile bit   PIR2_OSFIF           at PIR2 : 7
var volatile bit   PIR2_CMIF            at PIR2 : 6
var volatile bit   PIR2_LVDIF           at PIR2 : 5
var volatile bit   PIR2_BCLIF           at PIR2 : 3
var volatile bit   PIR2_CCP3IF          at PIR2 : 1
var volatile bit   PIR2_CCP2IF          at PIR2 : 0
-- ------------------------------------------------
var volatile word  TMR1                 at { 0xE }
-- ------------------------------------------------
var volatile byte  TMR1L                at { 0xE }
-- ------------------------------------------------
var volatile byte  TMR1H                at { 0xF }
-- ------------------------------------------------
var volatile byte  T1CON                at { 0x10 }
var volatile bit   T1CON_T1RUN          at T1CON : 6
var volatile bit*2 T1CON_T1CKPS         at T1CON : 4
var volatile bit   T1CON_T1OSCEN        at T1CON : 3
var volatile bit   T1CON_NT1SYNC        at T1CON : 2
var volatile bit   T1CON_TMR1CS         at T1CON : 1
var volatile bit   T1CON_TMR1ON         at T1CON : 0
-- ------------------------------------------------
var volatile byte  TMR2                 at { 0x11 }
-- ------------------------------------------------
var volatile byte  T2CON                at { 0x12 }
var volatile bit*4 T2CON_TOUTPS         at T2CON : 3
var volatile bit   T2CON_TMR2ON         at T2CON : 2
var volatile bit*2 T2CON_T2CKPS         at T2CON : 0
-- ------------------------------------------------
var volatile byte  SSPBUF               at { 0x13 }
-- ------------------------------------------------
var volatile byte  SSPCON               at { 0x14 }
var volatile bit   SSPCON_WCOL          at SSPCON : 7
var volatile bit   SSPCON_SSPOV         at SSPCON : 6
var volatile bit   SSPCON_SSPEN         at SSPCON : 5
var volatile bit   SSPCON_CKP           at SSPCON : 4
var volatile bit*4 SSPCON_SSPM          at SSPCON : 0
-- ------------------------------------------------
var volatile word  CCPR1                at { 0x15 }
-- ------------------------------------------------
var volatile byte  CCPR1L               at { 0x15 }
-- ------------------------------------------------
var volatile byte  CCPR1H               at { 0x16 }
-- ------------------------------------------------
var volatile byte  CCP1CON              at { 0x17 }
var volatile bit*2 CCP1CON_DC1B         at CCP1CON : 4
var volatile bit*4 CCP1CON_CCP1M        at CCP1CON : 0
-- ------------------------------------------------
var volatile byte  RCSTA                at { 0x18 }
var volatile bit   RCSTA_SPEN           at RCSTA : 7
var volatile bit   RCSTA_RX9            at RCSTA : 6
var volatile bit   RCSTA_SREN           at RCSTA : 5
var volatile bit   RCSTA_CREN           at RCSTA : 4
var volatile bit   RCSTA_ADDEN          at RCSTA : 3
var volatile bit   RCSTA_FERR           at RCSTA : 2
var volatile bit   RCSTA_OERR           at RCSTA : 1
var volatile bit   RCSTA_RX9D           at RCSTA : 0
-- ------------------------------------------------
var volatile byte  TXREG                at { 0x19 }
-- ------------------------------------------------
var volatile byte  RCREG                at { 0x1A }
-- ------------------------------------------------
var volatile word  CCPR2                at { 0x1B }
-- ------------------------------------------------
var volatile byte  CCPR2L               at { 0x1B }
-- ------------------------------------------------
var volatile byte  CCPR2H               at { 0x1C }
-- ------------------------------------------------
var volatile byte  CCP2CON              at { 0x1D }
var volatile bit*2 CCP2CON_DC2B         at CCP2CON : 4
var volatile bit*4 CCP2CON_CCP2M        at CCP2CON : 0
-- ------------------------------------------------
var volatile byte  ADRESH               at { 0x1E }
-- ------------------------------------------------
var volatile byte  ADCON0               at { 0x1F }
var volatile bit*2 ADCON0_ADCS          at ADCON0 : 6
var volatile bit*3 ADCON0_CHS           at ADCON0 : 3
var volatile bit   ADCON0_GO            at ADCON0 : 2
var volatile bit   ADCON0_NDONE         at ADCON0 : 2
var volatile bit   ADCON0_CHS3          at ADCON0 : 1
var volatile bit   ADCON0_ADON          at ADCON0 : 0
-- ------------------------------------------------
var volatile byte  OPTION_REG           at { 0x81,0x181 }
var volatile bit   OPTION_REG_NRBPU     at OPTION_REG : 7
var volatile bit   OPTION_REG_INTEDG    at OPTION_REG : 6
var volatile bit   OPTION_REG_T0CS      at OPTION_REG : 5
var volatile bit   OPTION_REG_T0SE      at OPTION_REG : 4
var volatile bit   OPTION_REG_PSA       at OPTION_REG : 3
var volatile bit*3 OPTION_REG_PS        at OPTION_REG : 0
-- ------------------------------------------------
var volatile byte  TRISA                at { 0x85 }
var volatile byte  PORTA_DIRECTION      at TRISA
--
procedure PORTA_LOW_DIRECTION'put(byte in x) is
  TRISA = (TRISA & 0xF0) | (x & 0x0F)
end procedure
function PORTA_LOW_DIRECTION'get return byte is
  return TRISA & 0x0F
end function
--
procedure PORTA_HIGH_DIRECTION'put(byte in x) is
  TRISA = (TRISA & 0x0F) | (x << 4)
end procedure
function PORTA_HIGH_DIRECTION'get return byte is
  return (TRISA >> 4)
end function
--
var volatile bit   TRISA_TRISA7         at TRISA : 7
var volatile bit   PIN_A7_DIRECTION     at TRISA : 7
var volatile bit   TRISA_TRISA6         at TRISA : 6
var volatile bit   PIN_A6_DIRECTION     at TRISA : 6
var volatile bit   TRISA_TRISA5         at TRISA : 5
var volatile bit   PIN_A5_DIRECTION     at TRISA : 5
var volatile bit   TRISA_TRISA4         at TRISA : 4
var volatile bit   PIN_A4_DIRECTION     at TRISA : 4
var volatile bit   TRISA_TRISA3         at TRISA : 3
var volatile bit   PIN_A3_DIRECTION     at TRISA : 3
var volatile bit   TRISA_TRISA2         at TRISA : 2
var volatile bit   PIN_A2_DIRECTION     at TRISA : 2
var volatile bit   TRISA_TRISA1         at TRISA : 1
var volatile bit   PIN_A1_DIRECTION     at TRISA : 1
var volatile bit   TRISA_TRISA0         at TRISA : 0
var volatile bit   PIN_A0_DIRECTION     at TRISA : 0
-- ------------------------------------------------
var volatile byte  TRISB                at { 0x86,0x186 }
var volatile byte  PORTB_DIRECTION      at TRISB
--
procedure PORTB_LOW_DIRECTION'put(byte in x) is
  TRISB = (TRISB & 0xF0) | (x & 0x0F)
end procedure
function PORTB_LOW_DIRECTION'get return byte is
  return TRISB & 0x0F
end function
--
procedure PORTB_HIGH_DIRECTION'put(byte in x) is
  TRISB = (TRISB & 0x0F) | (x << 4)
end procedure
function PORTB_HIGH_DIRECTION'get return byte is
  return (TRISB >> 4)
end function
--
var volatile bit   TRISB_TRISB7         at TRISB : 7
var volatile bit   PIN_B7_DIRECTION     at TRISB : 7
var volatile bit   TRISB_TRISB6         at TRISB : 6
var volatile bit   PIN_B6_DIRECTION     at TRISB : 6
var volatile bit   TRISB_TRISB5         at TRISB : 5
var volatile bit   PIN_B5_DIRECTION     at TRISB : 5
var volatile bit   TRISB_TRISB4         at TRISB : 4
var volatile bit   PIN_B4_DIRECTION     at TRISB : 4
var volatile bit   TRISB_TRISB3         at TRISB : 3
var volatile bit   PIN_B3_DIRECTION     at TRISB : 3
var volatile bit   TRISB_TRISB2         at TRISB : 2
var volatile bit   PIN_B2_DIRECTION     at TRISB : 2
var volatile bit   TRISB_TRISB1         at TRISB : 1
var volatile bit   PIN_B1_DIRECTION     at TRISB : 1
var volatile bit   TRISB_TRISB0         at TRISB : 0
var volatile bit   PIN_B0_DIRECTION     at TRISB : 0
-- ------------------------------------------------
var volatile byte  TRISC                at { 0x87 }
var volatile byte  PORTC_DIRECTION      at TRISC
--
procedure PORTC_LOW_DIRECTION'put(byte in x) is
  TRISC = (TRISC & 0xF0) | (x & 0x0F)
end procedure
function PORTC_LOW_DIRECTION'get return byte is
  return TRISC & 0x0F
end function
--
procedure PORTC_HIGH_DIRECTION'put(byte in x) is
  TRISC = (TRISC & 0x0F) | (x << 4)
end procedure
function PORTC_HIGH_DIRECTION'get return byte is
  return (TRISC >> 4)
end function
--
var volatile bit   TRISC_TRISC7         at TRISC : 7
var volatile bit   PIN_C7_DIRECTION     at TRISC : 7
var volatile bit   TRISC_TRISC6         at TRISC : 6
var volatile bit   PIN_C6_DIRECTION     at TRISC : 6
var volatile bit   TRISC_TRISC5         at TRISC : 5
var volatile bit   PIN_C5_DIRECTION     at TRISC : 5
var volatile bit   TRISC_TRISC4         at TRISC : 4
var volatile bit   PIN_C4_DIRECTION     at TRISC : 4
var volatile bit   TRISC_TRISC3         at TRISC : 3
var volatile bit   PIN_C3_DIRECTION     at TRISC : 3
var volatile bit   TRISC_TRISC2         at TRISC : 2
var volatile bit   PIN_C2_DIRECTION     at TRISC : 2
var volatile bit   TRISC_TRISC1         at TRISC : 1
var volatile bit   PIN_C1_DIRECTION     at TRISC : 1
var volatile bit   TRISC_TRISC0         at TRISC : 0
var volatile bit   PIN_C0_DIRECTION     at TRISC : 0
-- ------------------------------------------------
var volatile byte  TRISD                at { 0x88 }
var volatile byte  PORTD_DIRECTION      at TRISD
--
procedure PORTD_LOW_DIRECTION'put(byte in x) is
  TRISD = (TRISD & 0xF0) | (x & 0x0F)
end procedure
function PORTD_LOW_DIRECTION'get return byte is
  return TRISD & 0x0F
end function
--
procedure PORTD_HIGH_DIRECTION'put(byte in x) is
  TRISD = (TRISD & 0x0F) | (x << 4)
end procedure
function PORTD_HIGH_DIRECTION'get return byte is
  return (TRISD >> 4)
end function
--
var volatile bit   TRISD_TRISD7         at TRISD : 7
var volatile bit   PIN_D7_DIRECTION     at TRISD : 7
var volatile bit   TRISD_TRISD6         at TRISD : 6
var volatile bit   PIN_D6_DIRECTION     at TRISD : 6
var volatile bit   TRISD_TRISD5         at TRISD : 5
var volatile bit   PIN_D5_DIRECTION     at TRISD : 5
var volatile bit   TRISD_TRISD4         at TRISD : 4
var volatile bit   PIN_D4_DIRECTION     at TRISD : 4
var volatile bit   TRISD_TRISD3         at TRISD : 3
var volatile bit   PIN_D3_DIRECTION     at TRISD : 3
var volatile bit   TRISD_TRISD2         at TRISD : 2
var volatile bit   PIN_D2_DIRECTION     at TRISD : 2
var volatile bit   TRISD_TRISD1         at TRISD : 1
var volatile bit   PIN_D1_DIRECTION     at TRISD : 1
var volatile bit   TRISD_TRISD0         at TRISD : 0
var volatile bit   PIN_D0_DIRECTION     at TRISD : 0
-- ------------------------------------------------
var volatile byte  TRISE                at { 0x89 }
var volatile byte  PORTE_DIRECTION      at TRISE
--
procedure PORTE_LOW_DIRECTION'put(byte in x) is
  TRISE = (TRISE & 0xF0) | (x & 0x0F)
end procedure
function PORTE_LOW_DIRECTION'get return byte is
  return TRISE & 0x0F
end function
--
procedure PORTE_HIGH_DIRECTION'put(byte in x) is
  TRISE = (TRISE & 0x0F) | (x << 4)
end procedure
function PORTE_HIGH_DIRECTION'get return byte is
  return (TRISE >> 4)
end function
--
var volatile bit   TRISE_IBF            at TRISE : 7
var volatile bit   TRISE_OBF            at TRISE : 6
var volatile bit   TRISE_IBOV           at TRISE : 5
var volatile bit   TRISE_PSPMODE        at TRISE : 4
var volatile bit   TRISE_TRISE3         at TRISE : 3
var volatile bit   PIN_E3_DIRECTION     at TRISE : 3
var volatile bit   TRISE_TRISE2         at TRISE : 2
var volatile bit   PIN_E2_DIRECTION     at TRISE : 2
var volatile bit   TRISE_TRISE1         at TRISE : 1
var volatile bit   PIN_E1_DIRECTION     at TRISE : 1
var volatile bit   TRISE_TRISE0         at TRISE : 0
var volatile bit   PIN_E0_DIRECTION     at TRISE : 0
-- ------------------------------------------------
var volatile byte  PIE1                 at { 0x8C }
var volatile bit   PIE1_PSPIE           at PIE1 : 7
var volatile bit   PIE1_ADIE            at PIE1 : 6
var volatile bit   PIE1_RCIE            at PIE1 : 5
var volatile bit   PIE1_TXIE            at PIE1 : 4
var volatile bit   PIE1_SSPIE           at PIE1 : 3
var volatile bit   PIE1_CCP1IE          at PIE1 : 2
var volatile bit   PIE1_TMR2IE          at PIE1 : 1
var volatile bit   PIE1_TMR1IE          at PIE1 : 0
-- ------------------------------------------------
var volatile byte  PIE2                 at { 0x8D }
var volatile bit   PIE2_OSFIE           at PIE2 : 7
var volatile bit   PIE2_CMIE            at PIE2 : 6
var volatile bit   PIE2_LVDIE           at PIE2 : 5
var volatile bit   PIE2_BCLIE           at PIE2 : 3
var volatile bit   PIE2_CCP3IE          at PIE2 : 1
var volatile bit   PIE2_CCP2IE          at PIE2 : 0
-- ------------------------------------------------
var volatile byte  PCON                 at { 0x8E }
var volatile bit   PCON_SBOREN          at PCON : 2
var volatile bit   PCON_NPOR            at PCON : 1
var volatile bit   PCON_NBOR            at PCON : 0
-- ------------------------------------------------
var volatile byte  OSCCON               at { 0x8F }
var volatile bit*3 OSCCON_IRCF          at OSCCON : 4
var volatile bit   OSCCON_OSTS          at OSCCON : 3
var volatile bit   OSCCON_FLTS          at OSCCON : 2
var volatile bit*2 OSCCON_SCS           at OSCCON : 0
-- ------------------------------------------------
var volatile byte  OSCTUNE              at { 0x90 }
var volatile bit*6 OSCTUNE_TUN          at OSCTUNE : 0
-- ------------------------------------------------
var volatile byte  SSPCON2              at { 0x91 }
var volatile bit   SSPCON2_GCEN         at SSPCON2 : 7
var volatile bit   SSPCON2_ACKSTAT      at SSPCON2 : 6
var volatile bit   SSPCON2_ACKDT        at SSPCON2 : 5
var volatile bit   SSPCON2_ACKEN        at SSPCON2 : 4
var volatile bit   SSPCON2_RCEN         at SSPCON2 : 3
var volatile bit   SSPCON2_PEN          at SSPCON2 : 2
var volatile bit   SSPCON2_RSEN         at SSPCON2 : 1
var volatile bit   SSPCON2_SEN          at SSPCON2 : 0
-- ------------------------------------------------
var volatile byte  PR2                  at { 0x92 }
-- ------------------------------------------------
var volatile byte  SSPADD               at { 0x93 }
-- ------------------------------------------------
var volatile byte  SSPSTAT              at { 0x94 }
var volatile bit   SSPSTAT_SMP          at SSPSTAT : 7
var volatile bit   SSPSTAT_CKE          at SSPSTAT : 6
var volatile bit   SSPSTAT_D            at SSPSTAT : 5
var volatile bit   SSPSTAT_NA           at SSPSTAT : 5
var volatile bit   SSPSTAT_P            at SSPSTAT : 4
var volatile bit   SSPSTAT_S            at SSPSTAT : 3
var volatile bit   SSPSTAT_R            at SSPSTAT : 2
var volatile bit   SSPSTAT_NW           at SSPSTAT : 2
var volatile bit   SSPSTAT_UA           at SSPSTAT : 1
var volatile bit   SSPSTAT_BF           at SSPSTAT : 0
-- ------------------------------------------------
var volatile word  CCPR3                at { 0x95 }
-- ------------------------------------------------
var volatile byte  CCPR3L               at { 0x95 }
-- ------------------------------------------------
var volatile byte  CCPR3H               at { 0x96 }
-- ------------------------------------------------
var volatile byte  CCP3CON              at { 0x97 }
var volatile bit*2 CCP3CON_DC3B         at CCP3CON : 4
var volatile bit*4 CCP3CON_CCP3M        at CCP3CON : 0
-- ------------------------------------------------
var volatile byte  TXSTA                at { 0x98 }
var volatile bit   TXSTA_CSRC           at TXSTA : 7
var volatile bit   TXSTA_TX9            at TXSTA : 6
var volatile bit   TXSTA_TXEN           at TXSTA : 5
var volatile bit   TXSTA_SYNC           at TXSTA : 4
var volatile bit   TXSTA_BRGH           at TXSTA : 2
var volatile bit   TXSTA_TRMT           at TXSTA : 1
var volatile bit   TXSTA_TX9D           at TXSTA : 0
-- ------------------------------------------------
var volatile byte  SPBRG                at { 0x99 }
-- ------------------------------------------------
var volatile byte  ADCON2               at { 0x9B }
var volatile bit*3 ADCON2_ACQT          at ADCON2 : 3
-- ------------------------------------------------
var volatile byte  CMCON                at { 0x9C }
var volatile bit   CMCON_C2OUT          at CMCON : 7
var volatile bit   CMCON_C1OUT          at CMCON : 6
var volatile bit   CMCON_C2INV          at CMCON : 5
var volatile bit   CMCON_C1INV          at CMCON : 4
var volatile bit   CMCON_CIS            at CMCON : 3
var volatile bit*3 CMCON_CM             at CMCON : 0
-- ------------------------------------------------
var volatile byte  CVRCON               at { 0x9D }
var volatile bit   CVRCON_CVREN         at CVRCON : 7
var volatile bit   CVRCON_CVROE         at CVRCON : 6
var volatile bit   CVRCON_CVRR          at CVRCON : 5
var volatile bit*4 CVRCON_CVR           at CVRCON : 0
-- ------------------------------------------------
var volatile byte  ADRESL               at { 0x9E }
-- ------------------------------------------------
var volatile byte  ADCON1               at { 0x9F }
var volatile bit   ADCON1_ADFM          at ADCON1 : 7
var volatile bit   ADCON1_ADCS2         at ADCON1 : 6
var volatile bit*2 ADCON1_VCFG          at ADCON1 : 4
var volatile bit*4 ADCON1_PCFG          at ADCON1 : 0
-- ------------------------------------------------
var volatile byte  WDTCON               at { 0x105 }
var volatile bit*4 WDTCON_WDTPS         at WDTCON : 1
var volatile bit   WDTCON_SWDTEN        at WDTCON : 0
-- ------------------------------------------------
var volatile byte  LVDCON               at { 0x109 }
var volatile bit   LVDCON_IRVST         at LVDCON : 5
var volatile bit   LVDCON_LVDEN         at LVDCON : 4
var volatile bit*4 LVDCON_LVDL          at LVDCON : 0
-- ------------------------------------------------
var volatile byte  PMDATA               at { 0x10C }
-- ------------------------------------------------
var volatile byte  PMADR                at { 0x10D }
-- ------------------------------------------------
var volatile byte  PMDATH               at { 0x10E }
-- ------------------------------------------------
var volatile byte  PMADRH               at { 0x10F }
-- ------------------------------------------------
var volatile byte  PMCON1               at { 0x18C }
var volatile bit   PMCON1_RD            at PMCON1 : 0
--
-- ===================================================
-- Special device dependent procedures
--
-- ---------------------------------------------------
-- Disable ADC module.
--
procedure adc_off() is
  pragma inline
  ADCON0 = 0b0000_0000         -- disable ADC
  ADCON1 = 0b0000_0111         -- digital I/O
end procedure
--
-- ---------------------------------------------------
-- Disable comparator module
--
procedure comparator_off() is
  pragma inline
  CMCON  = 0b0000_0111         -- disable comparators
end procedure
--
-- ---------------------------------------------------
-- Change ports which have analog function by default
-- into digital I/O.
--
procedure enable_digital_io() is
  pragma inline
  adc_off()
  comparator_off()
end procedure
--
--
-- ==================================================
--
-- Symbolic Fuse definitions
-- -------------------------
--
-- addr 0x2007
--
pragma fuse_def OSC:0 0x13 {
       EXTOSC_CLKOUT = 0x13
       EXTOSC_NOCLKOUT = 0x12
       INTOSC_CLKOUT = 0x11
       INTOSC_NOCLKOUT = 0x10
       EC_NOCLKOUT = 0x3
       LP = 0x0
       XT = 0x1
       HS = 0x2
       }
pragma fuse_def WDT:0 0x4 {
       ENABLED = 0x4
       DISABLED = 0x0
       }
pragma fuse_def PWRTE:0 0x8 {
       DISABLED = 0x8
       ENABLED = 0x0
       }
pragma fuse_def MCLR:0 0x20 {
       EXTERNAL = 0x20
       INTERNAL = 0x0
       }
pragma fuse_def BROWNOUT:0 0x40 {
       ENABLED = 0x40
       DISABLED = 0x0
       }
pragma fuse_def VOLTAGE:0 0x180 {
       V20 = 0x180
       V27 = 0x100
       V42 = 0x80
       V45 = 0x0
       }
pragma fuse_def BACKBUG:0 0x800 {
       DISABLED = 0x800
       ENABLED = 0x0
       }
pragma fuse_def CCP2MUX:0 0x1000 {
       RC1 = 0x1000
       RB3 = 0x0
       }
pragma fuse_def CP:0 0x2000 {
       DISABLED = 0x2000
       ENABLED = 0x0
       }
--
-- addr 0x2008
--
pragma fuse_def FCMEN:1 0x1 {
       ENABLED = 0x1
       DISABLED = 0x0
       }
pragma fuse_def IESO:1 0x2 {
       ENABLED = 0x2
       DISABLED = 0x0
       }
pragma fuse_def BORSEN:1 0x40 {
       ENABLED = 0x40
       DISABLED = 0x0
       }
--
