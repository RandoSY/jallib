-- Title: hardware PWM control
-- Author: Stef Mientki, Copyright (C) 2002-2006, all rights reserved. 
-- Adapted-by: Sebastien Lelong
-- Compiler: >=2.4g
--
-- This file is part of jallib (http://jallib.googlecode.com)
-- Released under the BSD license (http://www.opensource.org/licenses/bsd-license.php)
--
-- Description: performs PWM operations on CCP1
-- The target must support this.
--
-- Notes: this is a heavy refactoring of the original pwm_hardware.jal
-- Stef's lib
--


var byte ccpr1l_shadow
var byte cpp1con_shadow 
-- -----------------------------------------------------------------------------



-- -----------------------------------------------------------------------------
-- sets dutycyle in low resolution mode
-- the 2 LSbits take their value from cpp1con_shadow, by default 0
-- this means if duty1 = 0, there's no pwm, if duty1 = 255, you're closed to
-- (but not at) the maximum pwm
-- -----------------------------------------------------------------------------
procedure pwm1_set_dutycycle(byte in duty) is
	ccpr1l_shadow = duty
	CCPR1L  = ccpr1l_shadow   -- reload 8 high order bits of dutycycle
	CCP1CON = cpp1con_shadow  -- reload 2 low  order bits of dutycycle 
end procedure
-- -----------------------------------------------------------------------------



-- -----------------------------------------------------------------------------
-- sets dutycyle in high resolution mode
-- the word passed to the procedure represents the high resolution value
-- of the duty cycle:
-- 		* duty1h<0:1> are the 2 LSbits
--		* duty1h<2:9> are the 8 MSbits
-- Because duty cycle is coded on 10 bits, the given value can't greater than 1024
-- If not active yet, calling this procedure will enable PWM
-- -----------------------------------------------------------------------------
procedure pwm1_set_dutycycle_highres(word in duty) is

	-- split word into 8 MSb and 2LSb
	var word dutyl = duty & 0b_0000_0011
	var word dutyh = duty >> 2

	ccpr1l_shadow = byte(dutyh)
	cpp1con_shadow = (byte(dutyl) & 0b_0000_0011) << 4
	
	CCPR1L  = ccpr1l_shadow
	-- reload while (re)activating pwm
	cpp1con_shadow = cpp1con_shadow | 0b_0000_1100
	CCP1CON = cpp1con_shadow
end procedure
-- -----------------------------------------------------------------------------

procedure pwm1_on() is
	-- pwm mode on, while keeping 2 LSbits
	cpp1con_shadow = cpp1con_shadow | 0b_0000_1100
	CCP1CON = cpp1con_shadow
end procedure


procedure pwm1_off() is
	-- pwm mode off, but keep 2 LSbits values
	cpp1con_shadow = cpp1con_shadow ^ 0b_0000_1100 -- ;; Note
	CCP1CON = cpp1con_shadow
end procedure



include pwm_common



