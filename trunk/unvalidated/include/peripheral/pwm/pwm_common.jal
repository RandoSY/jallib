-- Title: hardware PWM control, generic procedures
-- Author: Stef Mientki, Copyright (C) 2002-2006, all rights reserved. 
-- Adapted-by: Sebastien Lelong
-- Compiler: >=2.4g
--
-- This file is part of jallib (http://jallib.googlecode.com)
-- Released under the BSD license (http://www.opensource.org/licenses/bsd-license.php)
--
-- Description: this lib handles generic operation on PWM, 
-- whatever the channel number, etc...
-- It's aimed to be used with pwm_{register} lib (eg. pwm_ccp1.jal, ...)
--
-- Notes: this is a heavy refactoring of the original pwm_hardware.jal
-- Stef's lib
--



-- -----------------------------------------------------------------------------
-- initializes the PWM for high resolution (10 bits) and starts the PWM 
-- Freq can only be 1,5,20 kHz
-- Seb: since we've a limited set a frequencies, this procedure may not be used a lot.
-- -----------------------------------------------------------------------------
procedure pwm_init_resolution(byte in frequency) is
	-- set timervalue to maximum resolution
	PR2 = 0xFF
	
	-- set TMR2 prescaler and turn TMR2 on
	if frequency == 20 then
		T2CON = 0b_0000_0100
	elsif frequency == 5  then
		T2CON = 0b_0000_0101
	elsif frequency == 1  then
		T2CON = 0b_0000_0111
	else
		;THIS PRAGMA IS NOT CORRECTLY HANDLED BY JAL $.59 !!
		;pragma error  ;pwm frequency is not allowed for high resolution
		; Seb: but it should be handled correctly in jalv2 2.4. Let's try
		;pragma error  ;pwm frequency is not allowed for high resolution
	end if
end procedure
-- -----------------------------------------------------------------------------


-- Store potential PR2 value that could be used to actually
-- perform the accurate frequency
var volatile dword _pr2_1
var volatile dword _pr2_4
var volatile dword _pr2_16

-- -----------------------------------------------------------------------------
-- initializes the PWM for accurate frequency and starts the PWM
-- Frequency and dutycycle should be set by the following constants
--     const pwm_frequency = 2_000    -- pwm frequency in Hz
--     const pwm1_dutycycle = 50      -- dutycycle in percent of PWM1
--     const pwm2_dutycycle = 50      -- dutycycle in percent of PWM2
-- -----------------------------------------------------------------------------
procedure pwm_set_frequency(dword in freq) is
	-- compute all values
	_pr2_1 = target_clock / ( 1 *  4 * freq )
	_pr2_4   = target_clock / ( 4 *  4 * freq )
	_pr2_16  = target_clock / ( 16 * 4 * freq )
	-- calculate prescaler and divider
	var byte pre_scaler
	if _pr2_1 == 0 then
		-- since now it's a byte, cannot pragma error'ing...
		-- what should we do ?
		;;pragma error    -- pwm frequency is too high
		-- turn pwm off
		pre_scaler = 0b_0000_0000
	elsif _pr2_1 <= 256 then
		PR2 = byte(_pr2_1) - 1                     -- load timer value (base period)
		pre_scaler = 0b_0000_0100
	elsif _pr2_4 <= 256 then
		PR2 = byte(_pr2_4) - 1
		pre_scaler = 0b_0000_0101 
	elsif _pr2_16 <= 256 then
		PR2 = byte(_pr2_16) - 1
		pre_scaler = 0b_0000_0110 
	else
		-- again, cannot pragma error'ing...
		;;pragma error  -- pwm frequency is too low to be realized by this routine,
		;;-- use the post scaler and interrupt
		pre_scaler = 0b_0000_0000
	end if

	-- load tmr2 prescaler, and turn it on
	-- (post-scaler is not used in PWM !!)
	var byte t2con_tmp = T2CON & 0b_1111_1000
	T2CON   = t2con_tmp | pre_scaler   

end procedure


