-- Title: LCD library
-- Author: Stef Mientki, Copyright (c) 2006..2008, all rights reserved.
-- Adapted-by: Bert van Dam, Eur van Andel, eur@fiwihex.nl
-- Compiler:  >=2.4g
-- 
-- This file is part of jallib (http://jallib.googlecode.com)
-- Released under the BSD license (http://www.opensource.org/licenses/bsd-license.php)
--
-- Sources: pic.flappie.nl
-- 
-- Description: controls HD44780 compatible alphanumeric LCD screens
-- screens can range from 2x8  (2 lines, 8 chars) to 4x20.
-- 4 bit connection, uses 6 PIC pins
--
-- Expects: two pins for handshake: RS and EN
-- a port nibble for data: data_port
--
-- Example below, handshake pins can be on a different port, data pins can be high nibble as well
--
-- var  bit  RS        is pin_x5       -- LCD command/data select.
-- var  bit  EN        is pin_x4       -- LCD data trigger
-- var byte data_port  is portx_low    -- LCD data
-- portx_direction     = all_output    -- LCD data is portx_low

--

include delay_any_mc                -- delay procedures

-- =======================================================================
--                 LCD procedures and functions
-- =======================================================================

-- -----------------------------------------------------
-- Write nibble (lower order 4 bits of byte) to LCD.
-- Nibble is sent to data_port.
-- RS not touched: function can be used for commands and data
-- Required wait after write expected to be done by caller,
-- in 4-bit mode only required after second nibble.
-- -----------------------------------------------------

procedure  lcdwrtnibble(byte in data) is

  data_port = data                             -- replace low nibble
  EN = high                                     -- trigger on
  asm nop                                       -- wait (> 400 ns)
  EN = low                                      -- trigger off

end procedure

-- ----------------------------------------------------------
-- Send byte to the LCD as 2 nibbles (most significant first)
-- ----------------------------------------------------------

procedure  lcdwrtchar(byte in c) is

  lcdwrtnibble(c >> 4)                          -- write high nibble
  lcdwrtnibble(c)                               -- write low nibble
  delay_10us(4)                                 -- > 37 æs

end procedure


procedure hd44780'put(byte in c) is

  lcdwrtnibble(c >> 4)                          -- write high nibble
  lcdwrtnibble(c)                               -- write low nibble
  delay_10us(4)                                -- > 37 æs

end procedure


-- ------------------------------------------------------------
-- Clear screen LCD
-- ------------------------------------------------------------

procedure  lcdclearscreen is

  RS = low                                      -- control character follows
  lcdwrtchar(0b0000_0001)                       -- clear screen, cursor home
  delay_10us(150)                               -- 1.5 ms
  RS = high                                     -- switch back to data chars

end procedure


-- ------------------------------------------------------------
-- Set cursor position
-- ------------------------------------------------------------

procedure  lcdsetcursor(byte in row, byte in col)  is

  col = col | 0b1000_0000                       -- add offset top line
  if (row > 0) then                             -- 2nd line req'd
    col = col | 0b0100_0000                     -- add offset 2nd line
  end if
  RS = low                                      -- control character follows
  lcdwrtchar(col)                               -- new cursor position
  RS = high                                     -- switch back to data chars

end procedure


-- -----------------------------------------------------
-- Write low nibble of byte to LCD (as hex digit)
-- -----------------------------------------------------

procedure  lcdwrthexnibble(byte in c) is

  c = "0" + (c & 0x0F)                          -- nibble hex digit 0..9
  if (c > "9") then                             -- not in 0..9 range
    c = c + "A" - "0" - 10                      -- correction for A..F
  end if
  lcdwrtchar(c)                                 -- write the char

end procedure

-- ----------------------------------------------------------
-- Send byte to the LCD as 2 hex chars (most significant first)
-- ----------------------------------------------------------

procedure  lcdwrthexchar(byte in c) is

  lcdwrthexnibble(c >> 4)                       -- write high nibble
  lcdwrthexnibble(c)                            -- write low nibble
  delay_10us(4)                                 -- > 37 æs

end procedure


-- -----------------------------------------------------
-- Initialize LCD
-- - global init
-- - 2-line mode, no cursor
-- -----------------------------------------------------

procedure  lcdsetup  is

  RS = low                                      -- set control mode
  delay_1ms(15)                                 -- 15 ms power-up delay
  lcdwrtnibble(0b0000_0011)                     -- function set
  delay_1ms(5)                                   -- > 4.1 milliseconds
  lcdwrtnibble(0b0000_0011)                     -- function set
  delay_10us(110)                                -- > 100 æs
  lcdwrtnibble(0b0000_0011)                     -- function set
  delay_10us(4)                                 -- > 37 æs
  lcdwrtnibble(0b0000_0010)                     -- to 4-bit mode
  delay_10us(4)                                 -- > 37 æs
  lcdwrtchar(0b0010_1000)                       -- 4-bits, 2 lines, 5x8 font
  lcdwrtchar(0b0001_1100)                       -- cursor move right
  lcdwrtchar(0b0000_1100)                       -- display on, cursor,blink off
  lcdwrtchar(0b0000_0110)                       -- cursor->right, no shift
  lcdclearscreen                                -- clear screen
                                                -- incl switch to data mode
end procedure

-- startup code

lcdsetup()                                    -- to get the LCD running 
