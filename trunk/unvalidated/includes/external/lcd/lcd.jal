-- =======================================================================
--
-- lcd.jal library for controlling HD44780 compatible aphanumeric LCDs
--
-- =======================================================================



-- ===================================================================
--       DELAY procedures
--
-- With only these 2 procedures all needed delays can be obtained,
-- some not very accurate but good enough for this application
-- ===================================================================

-- -------------------------------------------------------------------
-- (multiple of) 16 microseconds delay (approximately)
-- microsecond call + return -   1  æs  (5 instr)
-- outer loop control        - 1.5  æs  (6 instr per unit)
-- inner loop                -  13  æs
-- -------------------------------------------------------------------

procedure  delay16mus(byte in units) is

  while (units > 0) loop
    _usec_delay(13)
    units = units - 1
  end loop

end procedure


-- -------------------------------------------------------------------
-- (multiple of) 100 microseconds delay (approximately)
-- microsecond call / return -  1   æs
-- outer loop control        -  1.5 æs
-- inner loop                - 97   æs
-- -------------------------------------------------------------------

procedure  delay100mus(byte in units) is

  while (units > 0) loop
    _usec_delay(97)
    units = units - 1
  end loop
end procedure


-- =======================================================================
--                 LCD procedures and functions
-- =======================================================================

-- -----------------------------------------------------
-- Write nibble (lower order 4 bits of byte) to LCD.
-- Nibble is sent to PORTB.0..3.
-- RS not touched: function can be used for commands and data
-- Required wait after write expected to be done by caller,
-- in 4-bit mode only required after second nibble.
-- -----------------------------------------------------

procedure  lcdWrtNibble(byte in data) is

  port_B_low = data                             -- replace low nibble
  EN = high                                     -- trigger on
  asm nop                                       -- wait (> 400 ns)
  EN = low                                      -- trigger off

end procedure

-- ----------------------------------------------------------
-- Send byte to the LCD as 2 nibbles (most significant first)
-- ----------------------------------------------------------

procedure  lcdWrtChar(byte in c) is

  lcdWrtNibble(c >> 4)                          -- write high nibble
  lcdWrtNibble(c)                               -- write low nibble
  delay16mus(3)                                 -- > 37 æs

end procedure




-- ------------------------------------------------------------
-- Clear screen LCD
-- ------------------------------------------------------------

procedure  lcdClearScreen is

  RS = low                                      -- control character follows
  lcdWrtChar(0b0000_0001)                       -- clear screen, cursor home
  delay100mus(15)                               -- 1.5 ms
  RS = high                                     -- switch back to data chars

end procedure


-- ------------------------------------------------------------
-- Set cursor position
-- ------------------------------------------------------------

procedure  lcdSetCursor(byte in row, byte in col)  is

  col = col | 0b1000_0000                       -- add offset top line
  if (row > 0) then                             -- 2nd line req'd
    col = col | 0b0100_0000                     -- add offset 2nd line
  end if
  RS = low                                      -- control character follows
  lcdWrtChar(col)                               -- new cursor position
  RS = high                                     -- switch back to data chars

end procedure


-- -----------------------------------------------------
-- Write low nibble of byte to LCD (as hex digit)
-- -----------------------------------------------------

procedure  lcdWrtHexNibble(byte in c) is

  c = "0" + (c & 0x0F)                          -- nibble hex digit 0..9
  if (c > "9") then                             -- not in 0..9 range
    c = c + "A" - "0" - 10                      -- correction for A..F
  end if
  lcdWrtChar(c)                                 -- write the char

end procedure

-- ----------------------------------------------------------
-- Send byte to the LCD as 2 hex chars (most significant first)
-- ----------------------------------------------------------

procedure  lcdWrtHexChar(byte in c) is

  lcdWrtHexNibble(c >> 4)                       -- write high nibble
  lcdWrtHexNibble(c)                            -- write low nibble
  delay16mus(3)                                 -- > 37 æs

end procedure


-- -----------------------------------------------------
-- Initialize LCD
-- - global init
-- - 2-line mode, no cursor
-- -----------------------------------------------------

procedure  lcdSetup  is

  RS = low                                      -- set control mode
  delay100mus(150)                              -- 15 ms power-up delay
  lcdWrtNibble(0b0000_0011)                     -- function set
  delay100mus(41)                               -- > 4.1 milliseconds
  lcdWrtNibble(0b0000_0011)                     -- function set
  delay100mus(1)                                -- > 100 æs
  lcdWrtNibble(0b0000_0011)                     -- function set
  delay16mus(3)                                 -- > 37 æs
  lcdWrtNibble(0b0000_0010)                     -- to 4-bit mode
  delay16mus(3)                                 -- > 37 æs
  lcdWrtChar(0b0010_1000)                       -- 4-bits, 2 lines, 5x8 font
  lcdWrtChar(0b0001_1100)                       -- cursor move right
  lcdWrtChar(0b0000_1100)                       -- display on, cursor,blink off
  lcdWrtChar(0b0000_0110)                       -- cursor->right, no shift
  lcdClearScreen                                -- clear screen
                                                -- incl switch to data mode
end procedure

-- startup code

lcdsetup()										-- to get the LCD running 
