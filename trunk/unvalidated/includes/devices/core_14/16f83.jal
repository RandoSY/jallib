-- ===================================================
-- JALV2 PICmicro specifications for 16F83
--
-- Created with Dev2Jal Rexx script version 0.0.29
-- Author: Rob Hamerling
-- File creation date/time: 27 Jul 2008 19:34:58
--
-- Sources of information:
--  - x:/mplab814/mplab_ide/device/PIC16F83.dev
--  - x:/mplab814/mpasm_suite/lkr/16F83_g.lkr
--
-- ---------------------------------------------------
-- Summary of manual changes
--
--   date        description
-- ---------    --------------------------------------
-- yyyy/mm/dd   ... text ....
--
--
--
-- ---------------------------------------------------
--
-- DataSheet: DS-30430
-- Programming Specifications: DS-30262
-- Vdd Range: 2.500-6.000 Nominal: 5.000
-- Vpp Range: 12.000-14.000 Default: 13.000
--
-- ===================================================
--
include ChipDef                     -- common constants
--
pragma  target  cpu   pic_14    -- (banks = 2)
pragma  target  chip  16F83
pragma  target  bank  0x0080
pragma  target  page  0x0800
pragma  stack   8
pragma  code    512
pragma  eeprom  0x2100,64
pragma  data    0xC-0x2F
--
var volatile byte _pic_accum at { 0x2E,0xAE }   -- (compiler)
var volatile byte _pic_isr_w at { 0x2F,0xAF }   -- (compiler)
--
const word  _fuses_ct             = 1
const word  _fuse_base            = 0x2007
const word  _fuses                = 0x3FFF
--
const word  _ID_ct                = 4
const word  _ID_base[_ID_ct]      = { 0x2000,0x2001,0x2002,0x2003 }
const word  _ID[_ID_ct]           = { 0x0000,0x0000,0x0000,0x0000 }
--
-- ------------------------------------------------
var volatile byte  INDF                 at { 0x0,0x80 }
var volatile byte  _ind                 at { 0x0,0x80 }      -- (compiler)
-- ------------------------------------------------
var volatile byte  TMR0                 at { 0x1 }
-- ------------------------------------------------
var volatile byte  PCL                  at { 0x2,0x82 }
var volatile byte  _pcl                 at { 0x2,0x82 }      -- (compiler)
-- ------------------------------------------------
var volatile byte  STATUS               at { 0x3,0x83 }
var volatile bit   IRP                  at STATUS : 7
var volatile bit*2 RP                   at STATUS : 5
var volatile bit   NTO                  at STATUS : 4
var volatile bit   NPD                  at STATUS : 3
var volatile bit   Z                    at STATUS : 2
var volatile bit   DC                   at STATUS : 1
var volatile bit   C                    at STATUS : 0
var volatile byte  _status              at { 0x3,0x83 }      -- (compiler)
const        byte  _irp                 =  7      -- (compiler)
const        byte  _RP1                 =  6      -- (compiler)
const        byte  _RP0                 =  5      -- (compiler)
const        byte  _not_to              =  4      -- (compiler)
const        byte  _not_pd              =  3      -- (compiler)
const        byte  _z                   =  2      -- (compiler)
const        byte  _dc                  =  1      -- (compiler)
const        byte  _c                   =  0      -- (compiler)
-- ------------------------------------------------
var volatile byte  FSR                  at { 0x4,0x84 }
var volatile byte  _fsr                 at { 0x4,0x84 }      -- (compiler)
-- ------------------------------------------------
var volatile byte  PORTA                at { 0x5 }
--
var          byte  _port_A_shadow        = PORTA
--
procedure _port_A_flush is
  pragma inline
  PORTA = _port_A_shadow
end procedure
--
procedure portA'put (byte in x) is
  pragma inline
  _port_A_shadow = x
  _port_A_flush
end procedure
--
var  byte port_A_low
procedure port_A_low'put(byte in x) is
  _port_A_shadow = (_port_A_shadow & 0xF0) | (x & 0x0F)
  _port_A_flush
end procedure
function port_A_low'get return byte is
  return PORTA & 0x0F
end function
--
var  byte port_A_high
procedure port_A_high'put(byte in x) is
  _port_A_shadow = (_port_A_shadow & 0x0F) | (x << 4)
  _port_A_flush
end procedure
function port_A_high'get return byte is
  return PORTA >> 4
end function
--
var volatile bit   RA4                  at PORTA : 4
var volatile bit   pin_A4               at PORTA : 4
procedure pin_A4'put(bit in x) is
  pragma inline
  var bit _Tmp_Bit at _port_A_shadow : 4
  _Tmp_Bit = x
  _port_A_flush
end procedure
--
var volatile bit   RA3                  at PORTA : 3
var volatile bit   pin_A3               at PORTA : 3
procedure pin_A3'put(bit in x) is
  pragma inline
  var bit _Tmp_Bit at _port_A_shadow : 3
  _Tmp_Bit = x
  _port_A_flush
end procedure
--
var volatile bit   RA2                  at PORTA : 2
var volatile bit   pin_A2               at PORTA : 2
procedure pin_A2'put(bit in x) is
  pragma inline
  var bit _Tmp_Bit at _port_A_shadow : 2
  _Tmp_Bit = x
  _port_A_flush
end procedure
--
var volatile bit   RA1                  at PORTA : 1
var volatile bit   pin_A1               at PORTA : 1
procedure pin_A1'put(bit in x) is
  pragma inline
  var bit _Tmp_Bit at _port_A_shadow : 1
  _Tmp_Bit = x
  _port_A_flush
end procedure
--
var volatile bit   RA0                  at PORTA : 0
var volatile bit   pin_A0               at PORTA : 0
procedure pin_A0'put(bit in x) is
  pragma inline
  var bit _Tmp_Bit at _port_A_shadow : 0
  _Tmp_Bit = x
  _port_A_flush
end procedure
--
-- ------------------------------------------------
var volatile byte  PORTB                at { 0x6 }
--
var          byte  _port_B_shadow        = PORTB
--
procedure _port_B_flush is
  pragma inline
  PORTB = _port_B_shadow
end procedure
--
procedure portB'put (byte in x) is
  pragma inline
  _port_B_shadow = x
  _port_B_flush
end procedure
--
var  byte port_B_low
procedure port_B_low'put(byte in x) is
  _port_B_shadow = (_port_B_shadow & 0xF0) | (x & 0x0F)
  _port_B_flush
end procedure
function port_B_low'get return byte is
  return PORTB & 0x0F
end function
--
var  byte port_B_high
procedure port_B_high'put(byte in x) is
  _port_B_shadow = (_port_B_shadow & 0x0F) | (x << 4)
  _port_B_flush
end procedure
function port_B_high'get return byte is
  return PORTB >> 4
end function
--
var volatile bit   RB7                  at PORTB : 7
var volatile bit   pin_B7               at PORTB : 7
procedure pin_B7'put(bit in x) is
  pragma inline
  var bit _Tmp_Bit at _port_B_shadow : 7
  _Tmp_Bit = x
  _port_B_flush
end procedure
--
var volatile bit   RB6                  at PORTB : 6
var volatile bit   pin_B6               at PORTB : 6
procedure pin_B6'put(bit in x) is
  pragma inline
  var bit _Tmp_Bit at _port_B_shadow : 6
  _Tmp_Bit = x
  _port_B_flush
end procedure
--
var volatile bit   RB5                  at PORTB : 5
var volatile bit   pin_B5               at PORTB : 5
procedure pin_B5'put(bit in x) is
  pragma inline
  var bit _Tmp_Bit at _port_B_shadow : 5
  _Tmp_Bit = x
  _port_B_flush
end procedure
--
var volatile bit   RB4                  at PORTB : 4
var volatile bit   pin_B4               at PORTB : 4
procedure pin_B4'put(bit in x) is
  pragma inline
  var bit _Tmp_Bit at _port_B_shadow : 4
  _Tmp_Bit = x
  _port_B_flush
end procedure
--
var volatile bit   RB3                  at PORTB : 3
var volatile bit   pin_B3               at PORTB : 3
procedure pin_B3'put(bit in x) is
  pragma inline
  var bit _Tmp_Bit at _port_B_shadow : 3
  _Tmp_Bit = x
  _port_B_flush
end procedure
--
var volatile bit   RB2                  at PORTB : 2
var volatile bit   pin_B2               at PORTB : 2
procedure pin_B2'put(bit in x) is
  pragma inline
  var bit _Tmp_Bit at _port_B_shadow : 2
  _Tmp_Bit = x
  _port_B_flush
end procedure
--
var volatile bit   RB1                  at PORTB : 1
var volatile bit   pin_B1               at PORTB : 1
procedure pin_B1'put(bit in x) is
  pragma inline
  var bit _Tmp_Bit at _port_B_shadow : 1
  _Tmp_Bit = x
  _port_B_flush
end procedure
--
var volatile bit   RB0                  at PORTB : 0
var volatile bit   pin_B0               at PORTB : 0
procedure pin_B0'put(bit in x) is
  pragma inline
  var bit _Tmp_Bit at _port_B_shadow : 0
  _Tmp_Bit = x
  _port_B_flush
end procedure
--
-- ------------------------------------------------
var volatile byte  EEDATA               at { 0x8 }
-- ------------------------------------------------
var volatile byte  EEADR                at { 0x9 }
-- ------------------------------------------------
var volatile byte  PCLATH               at { 0xA,0x8A }
var volatile byte  _pclath              at { 0xA,0x8A }      -- (compiler)
-- ------------------------------------------------
var volatile byte  INTCON               at { 0xB,0x8B }
var volatile bit   GIE                  at INTCON : 7
var volatile bit   EEIE                 at INTCON : 6
var volatile bit   TMR0IE               at INTCON : 5
var volatile bit   T0IE                 at INTCON : 5
var volatile bit   INTE                 at INTCON : 4
var volatile bit   RBIE                 at INTCON : 3
var volatile bit   TMR0IF               at INTCON : 2
var volatile bit   T0IF                 at INTCON : 2
var volatile bit   INTF                 at INTCON : 1
var volatile bit   RBIF                 at INTCON : 0
-- ------------------------------------------------
var volatile byte  OPTION_REG           at { 0x81 }
var volatile bit   NRBPU                at OPTION_REG : 7
var volatile bit   INTEDG               at OPTION_REG : 6
var volatile bit   T0CS                 at OPTION_REG : 5
var volatile bit   T0SE                 at OPTION_REG : 4
var volatile bit   PSA                  at OPTION_REG : 3
var volatile bit*3 PS                   at OPTION_REG : 0
-- ------------------------------------------------
var volatile byte  TRISA                at { 0x85 }
var volatile byte  port_A_direction     at TRISA
--
procedure port_A_low_direction'put(byte in x) is
  TRISA = (TRISA & 0xF0) | (x & 0x0F)
end procedure
function port_A_low_direction'get return byte is
  return TRISA & 0x0F
end function
--
procedure port_A_high_direction'put(byte in x) is
  TRISA = (TRISA & 0x0F) | (x << 4)
end procedure
function port_A_high_direction'get return byte is
  return (TRISA >> 4)
end function
--
var volatile bit   TRISA4               at TRISA : 4
var volatile bit   pin_A4_direction     at TRISA : 4
var volatile bit   TRISA3               at TRISA : 3
var volatile bit   pin_A3_direction     at TRISA : 3
var volatile bit   TRISA2               at TRISA : 2
var volatile bit   pin_A2_direction     at TRISA : 2
var volatile bit   TRISA1               at TRISA : 1
var volatile bit   pin_A1_direction     at TRISA : 1
var volatile bit   TRISA0               at TRISA : 0
var volatile bit   pin_A0_direction     at TRISA : 0
-- ------------------------------------------------
var volatile byte  TRISB                at { 0x86 }
var volatile byte  port_B_direction     at TRISB
--
procedure port_B_low_direction'put(byte in x) is
  TRISB = (TRISB & 0xF0) | (x & 0x0F)
end procedure
function port_B_low_direction'get return byte is
  return TRISB & 0x0F
end function
--
procedure port_B_high_direction'put(byte in x) is
  TRISB = (TRISB & 0x0F) | (x << 4)
end procedure
function port_B_high_direction'get return byte is
  return (TRISB >> 4)
end function
--
var volatile bit   TRISB7               at TRISB : 7
var volatile bit   pin_B7_direction     at TRISB : 7
var volatile bit   TRISB6               at TRISB : 6
var volatile bit   pin_B6_direction     at TRISB : 6
var volatile bit   TRISB5               at TRISB : 5
var volatile bit   pin_B5_direction     at TRISB : 5
var volatile bit   TRISB4               at TRISB : 4
var volatile bit   pin_B4_direction     at TRISB : 4
var volatile bit   TRISB3               at TRISB : 3
var volatile bit   pin_B3_direction     at TRISB : 3
var volatile bit   TRISB2               at TRISB : 2
var volatile bit   pin_B2_direction     at TRISB : 2
var volatile bit   TRISB1               at TRISB : 1
var volatile bit   pin_B1_direction     at TRISB : 1
var volatile bit   TRISB0               at TRISB : 0
var volatile bit   pin_B0_direction     at TRISB : 0
-- ------------------------------------------------
var volatile byte  EECON1               at { 0x88 }
var volatile bit   EEIF                 at EECON1 : 4
var volatile bit   WRERR                at EECON1 : 3
var volatile bit   WREN                 at EECON1 : 2
var volatile bit   WR                   at EECON1 : 1
var volatile bit   RD                   at EECON1 : 0
-- ------------------------------------------------
var volatile byte  EECON2               at { 0x89 }
--
-- ==================================================
--
-- Symbolic Fuse definitions
-- -------------------------
--
-- addr 0x2007
--
pragma fuse_def OSC 0x3 {
       EXTOSC_NOCLKOUT = 0x3
       LP = 0x0
       XT = 0x1
       HS = 0x2
       }
pragma fuse_def WDT 0x4 {
       ENABLED = 0x4
       DISABLED = 0x0
       }
pragma fuse_def PWRTE 0x8 {
       DISABLED = 0x8
       ENABLED = 0x0
       }
pragma fuse_def CP 0x3FF0 {
       DISABLED = 0x3FF0
       ENABLED = 0x0
       }
--
