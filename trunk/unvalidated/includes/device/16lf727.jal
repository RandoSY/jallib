-- ===================================================
-- Title: JalV2 device include file for PIC16LF727
--
-- Author: Rob Hamerling, Copyright (c) 2008..2008, all rights reserved.
--
-- Adapted-by:
--
-- Compiler: >=2.4g
--
-- This file is part of jallib  (http://jallib.googlecode.com)
-- Released under the BSD license (http://www.opensource.org/licenses/bsd-license.php)
--
-- Description: Device include file for PIC16LF727, containing:
--                - Declaration of ports and pins of the chip.
--                - Procedures for shadowing of ports and pins
--                  to circumvent the read-modify-write problem.
--                - Symbolic definitions for config bits (fuses)
--                - Some device dependent procedures for common
--                  operations, like:
--                   . enable-digital-io.
--
-- Sources:
--  - x:/mplab814/mplab_ide/device/PIC16LF727.dev
--  - x:/mplab814/mpasm_suite/lkr/16LF727_g.lkr
--
-- Notes:
--  - Created with Dev2Jal Rexx script version 0.0.37
--  - File creation date/time: 9 Aug 2008 10:01:10.
--
-- ===================================================
--
-- Device-ID: 0x1900
-- Vdd Range: 1.800-3.600 Nominal: 3.300
-- Vpp Range: 8.000-9.000 Default: 8.500
--
-- ---------------------------------------------------
--
include chipdef                     -- common constants
--
pragma  target  cpu   pic_14    -- (banks = 4)
pragma  target  chip  16LF727
pragma  target  bank  0x0080
pragma  target  page  0x0800
pragma  stack   8
pragma  code    8192
pragma  data    0x20-0x6F,0xA0-0xEF,0x110-0x16F,0x190-0x1EF
pragma  shared  0x70-0x7F
--
var volatile byte _pic_accum shared at { 0x7E,0xFE,0x17E,0x1FE }   -- (compiler)
var volatile byte _pic_isr_w shared at { 0x7F,0xFF,0x17F,0x1FF }   -- (compiler)
--
const word  _fuses_ct             = 2
const word  _fuse_base[_fuses_ct] = { 0x2007,0x2008 }
const word  _fuses[_fuses_ct]     = { 0x3FFF,0x3FFF }
--
const word  _ID_ct                = 4
const word  _ID_base[_ID_ct]      = { 0x2000,0x2001,0x2002,0x2003 }
const word  _ID[_ID_ct]           = { 0x0000,0x0000,0x0000,0x0000 }
--
-- ------------------------------------------------
var volatile byte  INDF                 at { 0x0,0x80,0x100,0x180 }
var volatile byte  _ind                 at { 0x0,0x80,0x100,0x180 }      -- (compiler)
-- ------------------------------------------------
var volatile byte  TMR0                 at { 0x1,0x101 }
-- ------------------------------------------------
var volatile byte  PCL                  at { 0x2,0x82,0x102,0x182 }
var volatile byte  _pcl                 at { 0x2,0x82,0x102,0x182 }      -- (compiler)
-- ------------------------------------------------
var volatile byte  STATUS               at { 0x3,0x83,0x103,0x183 }
var volatile bit   STATUS_IRP           at STATUS : 7
var volatile bit*2 STATUS_RP            at STATUS : 5
var volatile bit   STATUS_NTO           at STATUS : 4
var volatile bit   STATUS_NPD           at STATUS : 3
var volatile bit   STATUS_Z             at STATUS : 2
var volatile bit   STATUS_DC            at STATUS : 1
var volatile bit   STATUS_C             at STATUS : 0
var volatile byte  _status              at { 0x3,0x83,0x103,0x183 }      -- (compiler)
const        byte  _irp                 =  7      -- (compiler)
const        byte  _RP1                 =  6      -- (compiler)
const        byte  _RP0                 =  5      -- (compiler)
const        byte  _not_to              =  4      -- (compiler)
const        byte  _not_pd              =  3      -- (compiler)
const        byte  _z                   =  2      -- (compiler)
const        byte  _dc                  =  1      -- (compiler)
const        byte  _c                   =  0      -- (compiler)
-- ------------------------------------------------
var volatile byte  FSR                  at { 0x4,0x84,0x104,0x184 }
var volatile byte  _fsr                 at { 0x4,0x84,0x104,0x184 }      -- (compiler)
-- ------------------------------------------------
var volatile byte  PORTA                at { 0x5 }
--
var          byte  _PORT_A_SHADOW        = PORTA
--
procedure _port_A_flush is
  pragma inline
  PORTA = _PORT_A_SHADOW
end procedure
--
procedure PORTA'put (byte in x) is
  pragma inline
  _PORT_A_SHADOW = x
  _port_A_flush
end procedure
--
var  byte PORT_A_LOW
procedure PORT_A_LOW'put(byte in x) is
  _PORT_A_SHADOW = (_PORT_A_SHADOW & 0xF0) | (x & 0x0F)
  _port_A_flush
end procedure
function PORT_A_LOW'get return byte is
  return PORTA & 0x0F
end function
--
var  byte PORT_A_HIGH
procedure PORT_A_HIGH'put(byte in x) is
  _PORT_A_SHADOW = (_PORT_A_SHADOW & 0x0F) | (x << 4)
  _port_A_flush
end procedure
function PORT_A_HIGH'get return byte is
  return PORTA >> 4
end function
--
var volatile bit   PORTA_RA7            at PORTA : 7
var volatile bit   PIN_A7               at PORTA : 7
procedure PIN_A7'put(bit in x) is
  pragma inline
  var bit _Tmp_Bit at _PORT_A_SHADOW : 7
  _Tmp_Bit = x
  _port_A_flush
end procedure
--
var volatile bit   PORTA_RA6            at PORTA : 6
var volatile bit   PIN_A6               at PORTA : 6
procedure PIN_A6'put(bit in x) is
  pragma inline
  var bit _Tmp_Bit at _PORT_A_SHADOW : 6
  _Tmp_Bit = x
  _port_A_flush
end procedure
--
var volatile bit   PORTA_RA5            at PORTA : 5
var volatile bit   PIN_A5               at PORTA : 5
procedure PIN_A5'put(bit in x) is
  pragma inline
  var bit _Tmp_Bit at _PORT_A_SHADOW : 5
  _Tmp_Bit = x
  _port_A_flush
end procedure
--
var volatile bit   PORTA_RA4            at PORTA : 4
var volatile bit   PIN_A4               at PORTA : 4
procedure PIN_A4'put(bit in x) is
  pragma inline
  var bit _Tmp_Bit at _PORT_A_SHADOW : 4
  _Tmp_Bit = x
  _port_A_flush
end procedure
--
var volatile bit   PORTA_RA3            at PORTA : 3
var volatile bit   PIN_A3               at PORTA : 3
procedure PIN_A3'put(bit in x) is
  pragma inline
  var bit _Tmp_Bit at _PORT_A_SHADOW : 3
  _Tmp_Bit = x
  _port_A_flush
end procedure
--
var volatile bit   PORTA_RA2            at PORTA : 2
var volatile bit   PIN_A2               at PORTA : 2
procedure PIN_A2'put(bit in x) is
  pragma inline
  var bit _Tmp_Bit at _PORT_A_SHADOW : 2
  _Tmp_Bit = x
  _port_A_flush
end procedure
--
var volatile bit   PORTA_RA1            at PORTA : 1
var volatile bit   PIN_A1               at PORTA : 1
procedure PIN_A1'put(bit in x) is
  pragma inline
  var bit _Tmp_Bit at _PORT_A_SHADOW : 1
  _Tmp_Bit = x
  _port_A_flush
end procedure
--
var volatile bit   PORTA_RA0            at PORTA : 0
var volatile bit   PIN_A0               at PORTA : 0
procedure PIN_A0'put(bit in x) is
  pragma inline
  var bit _Tmp_Bit at _PORT_A_SHADOW : 0
  _Tmp_Bit = x
  _port_A_flush
end procedure
--
-- ------------------------------------------------
var volatile byte  PORTB                at { 0x6 }
--
var          byte  _PORT_B_SHADOW        = PORTB
--
procedure _port_B_flush is
  pragma inline
  PORTB = _PORT_B_SHADOW
end procedure
--
procedure PORTB'put (byte in x) is
  pragma inline
  _PORT_B_SHADOW = x
  _port_B_flush
end procedure
--
var  byte PORT_B_LOW
procedure PORT_B_LOW'put(byte in x) is
  _PORT_B_SHADOW = (_PORT_B_SHADOW & 0xF0) | (x & 0x0F)
  _port_B_flush
end procedure
function PORT_B_LOW'get return byte is
  return PORTB & 0x0F
end function
--
var  byte PORT_B_HIGH
procedure PORT_B_HIGH'put(byte in x) is
  _PORT_B_SHADOW = (_PORT_B_SHADOW & 0x0F) | (x << 4)
  _port_B_flush
end procedure
function PORT_B_HIGH'get return byte is
  return PORTB >> 4
end function
--
var volatile bit   PORTB_RB7            at PORTB : 7
var volatile bit   PIN_B7               at PORTB : 7
procedure PIN_B7'put(bit in x) is
  pragma inline
  var bit _Tmp_Bit at _PORT_B_SHADOW : 7
  _Tmp_Bit = x
  _port_B_flush
end procedure
--
var volatile bit   PORTB_RB6            at PORTB : 6
var volatile bit   PIN_B6               at PORTB : 6
procedure PIN_B6'put(bit in x) is
  pragma inline
  var bit _Tmp_Bit at _PORT_B_SHADOW : 6
  _Tmp_Bit = x
  _port_B_flush
end procedure
--
var volatile bit   PORTB_RB5            at PORTB : 5
var volatile bit   PIN_B5               at PORTB : 5
procedure PIN_B5'put(bit in x) is
  pragma inline
  var bit _Tmp_Bit at _PORT_B_SHADOW : 5
  _Tmp_Bit = x
  _port_B_flush
end procedure
--
var volatile bit   PORTB_RB4            at PORTB : 4
var volatile bit   PIN_B4               at PORTB : 4
procedure PIN_B4'put(bit in x) is
  pragma inline
  var bit _Tmp_Bit at _PORT_B_SHADOW : 4
  _Tmp_Bit = x
  _port_B_flush
end procedure
--
var volatile bit   PORTB_RB3            at PORTB : 3
var volatile bit   PIN_B3               at PORTB : 3
procedure PIN_B3'put(bit in x) is
  pragma inline
  var bit _Tmp_Bit at _PORT_B_SHADOW : 3
  _Tmp_Bit = x
  _port_B_flush
end procedure
--
var volatile bit   PORTB_RB2            at PORTB : 2
var volatile bit   PIN_B2               at PORTB : 2
procedure PIN_B2'put(bit in x) is
  pragma inline
  var bit _Tmp_Bit at _PORT_B_SHADOW : 2
  _Tmp_Bit = x
  _port_B_flush
end procedure
--
var volatile bit   PORTB_RB1            at PORTB : 1
var volatile bit   PIN_B1               at PORTB : 1
procedure PIN_B1'put(bit in x) is
  pragma inline
  var bit _Tmp_Bit at _PORT_B_SHADOW : 1
  _Tmp_Bit = x
  _port_B_flush
end procedure
--
var volatile bit   PORTB_RB0            at PORTB : 0
var volatile bit   PIN_B0               at PORTB : 0
procedure PIN_B0'put(bit in x) is
  pragma inline
  var bit _Tmp_Bit at _PORT_B_SHADOW : 0
  _Tmp_Bit = x
  _port_B_flush
end procedure
--
-- ------------------------------------------------
var volatile byte  PORTC                at { 0x7 }
--
var          byte  _PORT_C_SHADOW        = PORTC
--
procedure _port_C_flush is
  pragma inline
  PORTC = _PORT_C_SHADOW
end procedure
--
procedure PORTC'put (byte in x) is
  pragma inline
  _PORT_C_SHADOW = x
  _port_C_flush
end procedure
--
var  byte PORT_C_LOW
procedure PORT_C_LOW'put(byte in x) is
  _PORT_C_SHADOW = (_PORT_C_SHADOW & 0xF0) | (x & 0x0F)
  _port_C_flush
end procedure
function PORT_C_LOW'get return byte is
  return PORTC & 0x0F
end function
--
var  byte PORT_C_HIGH
procedure PORT_C_HIGH'put(byte in x) is
  _PORT_C_SHADOW = (_PORT_C_SHADOW & 0x0F) | (x << 4)
  _port_C_flush
end procedure
function PORT_C_HIGH'get return byte is
  return PORTC >> 4
end function
--
var volatile bit   PORTC_RC7            at PORTC : 7
var volatile bit   PIN_C7               at PORTC : 7
procedure PIN_C7'put(bit in x) is
  pragma inline
  var bit _Tmp_Bit at _PORT_C_SHADOW : 7
  _Tmp_Bit = x
  _port_C_flush
end procedure
--
var volatile bit   PORTC_RC6            at PORTC : 6
var volatile bit   PIN_C6               at PORTC : 6
procedure PIN_C6'put(bit in x) is
  pragma inline
  var bit _Tmp_Bit at _PORT_C_SHADOW : 6
  _Tmp_Bit = x
  _port_C_flush
end procedure
--
var volatile bit   PORTC_RC5            at PORTC : 5
var volatile bit   PIN_C5               at PORTC : 5
procedure PIN_C5'put(bit in x) is
  pragma inline
  var bit _Tmp_Bit at _PORT_C_SHADOW : 5
  _Tmp_Bit = x
  _port_C_flush
end procedure
--
var volatile bit   PORTC_RC4            at PORTC : 4
var volatile bit   PIN_C4               at PORTC : 4
procedure PIN_C4'put(bit in x) is
  pragma inline
  var bit _Tmp_Bit at _PORT_C_SHADOW : 4
  _Tmp_Bit = x
  _port_C_flush
end procedure
--
var volatile bit   PORTC_RC3            at PORTC : 3
var volatile bit   PIN_C3               at PORTC : 3
procedure PIN_C3'put(bit in x) is
  pragma inline
  var bit _Tmp_Bit at _PORT_C_SHADOW : 3
  _Tmp_Bit = x
  _port_C_flush
end procedure
--
var volatile bit   PORTC_RC2            at PORTC : 2
var volatile bit   PIN_C2               at PORTC : 2
procedure PIN_C2'put(bit in x) is
  pragma inline
  var bit _Tmp_Bit at _PORT_C_SHADOW : 2
  _Tmp_Bit = x
  _port_C_flush
end procedure
--
var volatile bit   PORTC_RC1            at PORTC : 1
var volatile bit   PIN_C1               at PORTC : 1
procedure PIN_C1'put(bit in x) is
  pragma inline
  var bit _Tmp_Bit at _PORT_C_SHADOW : 1
  _Tmp_Bit = x
  _port_C_flush
end procedure
--
var volatile bit   PORTC_RC0            at PORTC : 0
var volatile bit   PIN_C0               at PORTC : 0
procedure PIN_C0'put(bit in x) is
  pragma inline
  var bit _Tmp_Bit at _PORT_C_SHADOW : 0
  _Tmp_Bit = x
  _port_C_flush
end procedure
--
-- ------------------------------------------------
var volatile byte  PORTD                at { 0x8 }
--
var          byte  _PORT_D_SHADOW        = PORTD
--
procedure _port_D_flush is
  pragma inline
  PORTD = _PORT_D_SHADOW
end procedure
--
procedure PORTD'put (byte in x) is
  pragma inline
  _PORT_D_SHADOW = x
  _port_D_flush
end procedure
--
var  byte PORT_D_LOW
procedure PORT_D_LOW'put(byte in x) is
  _PORT_D_SHADOW = (_PORT_D_SHADOW & 0xF0) | (x & 0x0F)
  _port_D_flush
end procedure
function PORT_D_LOW'get return byte is
  return PORTD & 0x0F
end function
--
var  byte PORT_D_HIGH
procedure PORT_D_HIGH'put(byte in x) is
  _PORT_D_SHADOW = (_PORT_D_SHADOW & 0x0F) | (x << 4)
  _port_D_flush
end procedure
function PORT_D_HIGH'get return byte is
  return PORTD >> 4
end function
--
var volatile bit   PORTD_RD7            at PORTD : 7
var volatile bit   PIN_D7               at PORTD : 7
procedure PIN_D7'put(bit in x) is
  pragma inline
  var bit _Tmp_Bit at _PORT_D_SHADOW : 7
  _Tmp_Bit = x
  _port_D_flush
end procedure
--
var volatile bit   PORTD_RD6            at PORTD : 6
var volatile bit   PIN_D6               at PORTD : 6
procedure PIN_D6'put(bit in x) is
  pragma inline
  var bit _Tmp_Bit at _PORT_D_SHADOW : 6
  _Tmp_Bit = x
  _port_D_flush
end procedure
--
var volatile bit   PORTD_RD5            at PORTD : 5
var volatile bit   PIN_D5               at PORTD : 5
procedure PIN_D5'put(bit in x) is
  pragma inline
  var bit _Tmp_Bit at _PORT_D_SHADOW : 5
  _Tmp_Bit = x
  _port_D_flush
end procedure
--
var volatile bit   PORTD_RD4            at PORTD : 4
var volatile bit   PIN_D4               at PORTD : 4
procedure PIN_D4'put(bit in x) is
  pragma inline
  var bit _Tmp_Bit at _PORT_D_SHADOW : 4
  _Tmp_Bit = x
  _port_D_flush
end procedure
--
var volatile bit   PORTD_RD3            at PORTD : 3
var volatile bit   PIN_D3               at PORTD : 3
procedure PIN_D3'put(bit in x) is
  pragma inline
  var bit _Tmp_Bit at _PORT_D_SHADOW : 3
  _Tmp_Bit = x
  _port_D_flush
end procedure
--
var volatile bit   PORTD_RD2            at PORTD : 2
var volatile bit   PIN_D2               at PORTD : 2
procedure PIN_D2'put(bit in x) is
  pragma inline
  var bit _Tmp_Bit at _PORT_D_SHADOW : 2
  _Tmp_Bit = x
  _port_D_flush
end procedure
--
var volatile bit   PORTD_RD1            at PORTD : 1
var volatile bit   PIN_D1               at PORTD : 1
procedure PIN_D1'put(bit in x) is
  pragma inline
  var bit _Tmp_Bit at _PORT_D_SHADOW : 1
  _Tmp_Bit = x
  _port_D_flush
end procedure
--
var volatile bit   PORTD_RD0            at PORTD : 0
var volatile bit   PIN_D0               at PORTD : 0
procedure PIN_D0'put(bit in x) is
  pragma inline
  var bit _Tmp_Bit at _PORT_D_SHADOW : 0
  _Tmp_Bit = x
  _port_D_flush
end procedure
--
-- ------------------------------------------------
var volatile byte  PORTE                at { 0x9 }
--
var          byte  _PORT_E_SHADOW        = PORTE
--
procedure _port_E_flush is
  pragma inline
  PORTE = _PORT_E_SHADOW
end procedure
--
procedure PORTE'put (byte in x) is
  pragma inline
  _PORT_E_SHADOW = x
  _port_E_flush
end procedure
--
var  byte PORT_E_LOW
procedure PORT_E_LOW'put(byte in x) is
  _PORT_E_SHADOW = (_PORT_E_SHADOW & 0xF0) | (x & 0x0F)
  _port_E_flush
end procedure
function PORT_E_LOW'get return byte is
  return PORTE & 0x0F
end function
--
var  byte PORT_E_HIGH
procedure PORT_E_HIGH'put(byte in x) is
  _PORT_E_SHADOW = (_PORT_E_SHADOW & 0x0F) | (x << 4)
  _port_E_flush
end procedure
function PORT_E_HIGH'get return byte is
  return PORTE >> 4
end function
--
var volatile bit   PORTE_RE3            at PORTE : 3
var volatile bit   PIN_E3               at PORTE : 3
procedure PIN_E3'put(bit in x) is
  pragma inline
  var bit _Tmp_Bit at _PORT_E_SHADOW : 3
  _Tmp_Bit = x
  _port_E_flush
end procedure
--
var volatile bit   PORTE_RE2            at PORTE : 2
var volatile bit   PIN_E2               at PORTE : 2
procedure PIN_E2'put(bit in x) is
  pragma inline
  var bit _Tmp_Bit at _PORT_E_SHADOW : 2
  _Tmp_Bit = x
  _port_E_flush
end procedure
--
var volatile bit   PORTE_RE1            at PORTE : 1
var volatile bit   PIN_E1               at PORTE : 1
procedure PIN_E1'put(bit in x) is
  pragma inline
  var bit _Tmp_Bit at _PORT_E_SHADOW : 1
  _Tmp_Bit = x
  _port_E_flush
end procedure
--
var volatile bit   PORTE_RE0            at PORTE : 0
var volatile bit   PIN_E0               at PORTE : 0
procedure PIN_E0'put(bit in x) is
  pragma inline
  var bit _Tmp_Bit at _PORT_E_SHADOW : 0
  _Tmp_Bit = x
  _port_E_flush
end procedure
--
-- ------------------------------------------------
var volatile byte  PCLATH               at { 0xA,0x8A,0x10A,0x18A }
var volatile byte  _pclath              at { 0xA,0x8A,0x10A,0x18A }      -- (compiler)
-- ------------------------------------------------
var volatile byte  INTCON               at { 0xB,0x8B,0x10B,0x18B }
var volatile bit   INTCON_GIE           at INTCON : 7
var volatile bit   INTCON_PEIE          at INTCON : 6
var volatile bit   INTCON_TMR0IE        at INTCON : 5
var volatile bit   INTCON_T0IE          at INTCON : 5
var volatile bit   INTCON_INTE          at INTCON : 4
var volatile bit   INTCON_RBIE          at INTCON : 3
var volatile bit   INTCON_TMR0IF        at INTCON : 2
var volatile bit   INTCON_T0IF          at INTCON : 2
var volatile bit   INTCON_INTF          at INTCON : 1
var volatile bit   INTCON_RBIF          at INTCON : 0
-- ------------------------------------------------
var volatile byte  PIR1                 at { 0xC }
var volatile bit   PIR1_TMR1GIF         at PIR1 : 7
var volatile bit   PIR1_ADIF            at PIR1 : 6
var volatile bit   PIR1_RCIF            at PIR1 : 5
var volatile bit   PIR1_TXIF            at PIR1 : 4
var volatile bit   PIR1_SSPIF           at PIR1 : 3
var volatile bit   PIR1_CCP1IF          at PIR1 : 2
var volatile bit   PIR1_TMR2IF          at PIR1 : 1
var volatile bit   PIR1_TMR1IF          at PIR1 : 0
-- ------------------------------------------------
var volatile byte  PIR2                 at { 0xD }
var volatile bit   PIR2_CCP2IF          at PIR2 : 0
-- ------------------------------------------------
var volatile word  TMR1                 at { 0xE }
-- ------------------------------------------------
var volatile byte  TMR1L                at { 0xE }
-- ------------------------------------------------
var volatile byte  TMR1H                at { 0xF }
-- ------------------------------------------------
var volatile byte  T1CON                at { 0x10 }
var volatile bit*2 T1CON_TMR1CS         at T1CON : 6
var volatile bit*2 T1CON_T1CKPS         at T1CON : 4
var volatile bit   T1CON_T1OSCEN        at T1CON : 3
var volatile bit   T1CON_T1SYNC         at T1CON : 2
var volatile bit   T1CON_TMR1ON         at T1CON : 0
-- ------------------------------------------------
var volatile byte  TMR2                 at { 0x11 }
-- ------------------------------------------------
var volatile byte  T2CON                at { 0x12 }
var volatile bit*4 T2CON_TOUTPS         at T2CON : 3
var volatile bit   T2CON_TMR2ON         at T2CON : 2
var volatile bit*2 T2CON_T2CKPS         at T2CON : 0
-- ------------------------------------------------
var volatile byte  SSPBUF               at { 0x13 }
-- ------------------------------------------------
var volatile byte  SSPCON               at { 0x14 }
var volatile bit   SSPCON_WCOL          at SSPCON : 7
var volatile bit   SSPCON_SSPOV         at SSPCON : 6
var volatile bit   SSPCON_SSPEN         at SSPCON : 5
var volatile bit   SSPCON_CKP           at SSPCON : 4
var volatile bit*4 SSPCON_SSPM          at SSPCON : 0
-- ------------------------------------------------
var volatile word  CCPR1                at { 0x15 }
-- ------------------------------------------------
var volatile byte  CCPR1L               at { 0x15 }
-- ------------------------------------------------
var volatile byte  CCPR1H               at { 0x16 }
-- ------------------------------------------------
var volatile byte  CCP1CON              at { 0x17 }
var volatile bit*2 CCP1CON_DC1B         at CCP1CON : 4
var volatile bit*4 CCP1CON_CCP1M        at CCP1CON : 0
-- ------------------------------------------------
var volatile byte  RCSTA                at { 0x18 }
var volatile bit   RCSTA_SPEN           at RCSTA : 7
var volatile bit   RCSTA_RX9            at RCSTA : 6
var volatile bit   RCSTA_SREN           at RCSTA : 5
var volatile bit   RCSTA_CREN           at RCSTA : 4
var volatile bit   RCSTA_ADDEN          at RCSTA : 3
var volatile bit   RCSTA_FERR           at RCSTA : 2
var volatile bit   RCSTA_OERR           at RCSTA : 1
var volatile bit   RCSTA_RX9D           at RCSTA : 0
-- ------------------------------------------------
var volatile byte  TXREG                at { 0x19 }
-- ------------------------------------------------
var volatile byte  RCREG                at { 0x1A }
-- ------------------------------------------------
var volatile word  CCPR2                at { 0x1B }
-- ------------------------------------------------
var volatile byte  CCPR2L               at { 0x1B }
-- ------------------------------------------------
var volatile byte  CCPR2H               at { 0x1C }
-- ------------------------------------------------
var volatile byte  CCP2CON              at { 0x1D }
var volatile bit*2 CCP2CON_DC2B         at CCP2CON : 4
var volatile bit*4 CCP2CON_CCP2M        at CCP2CON : 0
-- ------------------------------------------------
var volatile byte  ADRES                at { 0x1E }
-- ------------------------------------------------
var volatile byte  ADCON0               at { 0x1F }
var volatile bit*4 ADCON0_CHS           at ADCON0 : 2
var volatile bit   ADCON0_GO            at ADCON0 : 1
var volatile bit   ADCON0_NDONE         at ADCON0 : 1
var volatile bit   ADCON0_ADON          at ADCON0 : 0
-- ------------------------------------------------
var volatile byte  OPTION_REG           at { 0x81,0x181 }
var volatile bit   OPTION_REG_NRBPU     at OPTION_REG : 7
var volatile bit   OPTION_REG_INTEDG    at OPTION_REG : 6
var volatile bit   OPTION_REG_T0CS      at OPTION_REG : 5
var volatile bit   OPTION_REG_T0SE      at OPTION_REG : 4
var volatile bit   OPTION_REG_PSA       at OPTION_REG : 3
var volatile bit*3 OPTION_REG_PS        at OPTION_REG : 0
-- ------------------------------------------------
var volatile byte  TRISA                at { 0x85 }
var volatile byte  PORT_A_DIRECTION     at TRISA
--
procedure PORT_A_LOW_DIRECTION'put(byte in x) is
  TRISA = (TRISA & 0xF0) | (x & 0x0F)
end procedure
function PORT_A_LOW_DIRECTION'get return byte is
  return TRISA & 0x0F
end function
--
procedure PORT_A_HIGH_DIRECTION'put(byte in x) is
  TRISA = (TRISA & 0x0F) | (x << 4)
end procedure
function PORT_A_HIGH_DIRECTION'get return byte is
  return (TRISA >> 4)
end function
--
var volatile bit   TRISA_TRISA7         at TRISA : 7
var volatile bit   PIN_A7_DIRECTION     at TRISA : 7
var volatile bit   TRISA_TRISA6         at TRISA : 6
var volatile bit   PIN_A6_DIRECTION     at TRISA : 6
var volatile bit   TRISA_TRISA5         at TRISA : 5
var volatile bit   PIN_A5_DIRECTION     at TRISA : 5
var volatile bit   TRISA_TRISA4         at TRISA : 4
var volatile bit   PIN_A4_DIRECTION     at TRISA : 4
var volatile bit   TRISA_TRISA3         at TRISA : 3
var volatile bit   PIN_A3_DIRECTION     at TRISA : 3
var volatile bit   TRISA_TRISA2         at TRISA : 2
var volatile bit   PIN_A2_DIRECTION     at TRISA : 2
var volatile bit   TRISA_TRISA1         at TRISA : 1
var volatile bit   PIN_A1_DIRECTION     at TRISA : 1
var volatile bit   TRISA_TRISA0         at TRISA : 0
var volatile bit   PIN_A0_DIRECTION     at TRISA : 0
-- ------------------------------------------------
var volatile byte  TRISB                at { 0x86 }
var volatile byte  PORT_B_DIRECTION     at TRISB
--
procedure PORT_B_LOW_DIRECTION'put(byte in x) is
  TRISB = (TRISB & 0xF0) | (x & 0x0F)
end procedure
function PORT_B_LOW_DIRECTION'get return byte is
  return TRISB & 0x0F
end function
--
procedure PORT_B_HIGH_DIRECTION'put(byte in x) is
  TRISB = (TRISB & 0x0F) | (x << 4)
end procedure
function PORT_B_HIGH_DIRECTION'get return byte is
  return (TRISB >> 4)
end function
--
var volatile bit   TRISB_TRISB7         at TRISB : 7
var volatile bit   PIN_B7_DIRECTION     at TRISB : 7
var volatile bit   TRISB_TRISB6         at TRISB : 6
var volatile bit   PIN_B6_DIRECTION     at TRISB : 6
var volatile bit   TRISB_TRISB5         at TRISB : 5
var volatile bit   PIN_B5_DIRECTION     at TRISB : 5
var volatile bit   TRISB_TRISB4         at TRISB : 4
var volatile bit   PIN_B4_DIRECTION     at TRISB : 4
var volatile bit   TRISB_TRISB3         at TRISB : 3
var volatile bit   PIN_B3_DIRECTION     at TRISB : 3
var volatile bit   TRISB_TRISB2         at TRISB : 2
var volatile bit   PIN_B2_DIRECTION     at TRISB : 2
var volatile bit   TRISB_TRISB1         at TRISB : 1
var volatile bit   PIN_B1_DIRECTION     at TRISB : 1
var volatile bit   TRISB_TRISB0         at TRISB : 0
var volatile bit   PIN_B0_DIRECTION     at TRISB : 0
-- ------------------------------------------------
var volatile byte  TRISC                at { 0x87 }
var volatile byte  PORT_C_DIRECTION     at TRISC
--
procedure PORT_C_LOW_DIRECTION'put(byte in x) is
  TRISC = (TRISC & 0xF0) | (x & 0x0F)
end procedure
function PORT_C_LOW_DIRECTION'get return byte is
  return TRISC & 0x0F
end function
--
procedure PORT_C_HIGH_DIRECTION'put(byte in x) is
  TRISC = (TRISC & 0x0F) | (x << 4)
end procedure
function PORT_C_HIGH_DIRECTION'get return byte is
  return (TRISC >> 4)
end function
--
var volatile bit   TRISC_TRISC7         at TRISC : 7
var volatile bit   PIN_C7_DIRECTION     at TRISC : 7
var volatile bit   TRISC_TRISC6         at TRISC : 6
var volatile bit   PIN_C6_DIRECTION     at TRISC : 6
var volatile bit   TRISC_TRISC5         at TRISC : 5
var volatile bit   PIN_C5_DIRECTION     at TRISC : 5
var volatile bit   TRISC_TRISC4         at TRISC : 4
var volatile bit   PIN_C4_DIRECTION     at TRISC : 4
var volatile bit   TRISC_TRISC3         at TRISC : 3
var volatile bit   PIN_C3_DIRECTION     at TRISC : 3
var volatile bit   TRISC_TRISC2         at TRISC : 2
var volatile bit   PIN_C2_DIRECTION     at TRISC : 2
var volatile bit   TRISC_TRISC1         at TRISC : 1
var volatile bit   PIN_C1_DIRECTION     at TRISC : 1
var volatile bit   TRISC_TRISC0         at TRISC : 0
var volatile bit   PIN_C0_DIRECTION     at TRISC : 0
-- ------------------------------------------------
var volatile byte  TRISD                at { 0x88 }
var volatile byte  PORT_D_DIRECTION     at TRISD
--
procedure PORT_D_LOW_DIRECTION'put(byte in x) is
  TRISD = (TRISD & 0xF0) | (x & 0x0F)
end procedure
function PORT_D_LOW_DIRECTION'get return byte is
  return TRISD & 0x0F
end function
--
procedure PORT_D_HIGH_DIRECTION'put(byte in x) is
  TRISD = (TRISD & 0x0F) | (x << 4)
end procedure
function PORT_D_HIGH_DIRECTION'get return byte is
  return (TRISD >> 4)
end function
--
var volatile bit   TRISD_TRISD7         at TRISD : 7
var volatile bit   PIN_D7_DIRECTION     at TRISD : 7
var volatile bit   TRISD_TRISD6         at TRISD : 6
var volatile bit   PIN_D6_DIRECTION     at TRISD : 6
var volatile bit   TRISD_TRISD5         at TRISD : 5
var volatile bit   PIN_D5_DIRECTION     at TRISD : 5
var volatile bit   TRISD_TRISD4         at TRISD : 4
var volatile bit   PIN_D4_DIRECTION     at TRISD : 4
var volatile bit   TRISD_TRISD3         at TRISD : 3
var volatile bit   PIN_D3_DIRECTION     at TRISD : 3
var volatile bit   TRISD_TRISD2         at TRISD : 2
var volatile bit   PIN_D2_DIRECTION     at TRISD : 2
var volatile bit   TRISD_TRISD1         at TRISD : 1
var volatile bit   PIN_D1_DIRECTION     at TRISD : 1
var volatile bit   TRISD_TRISD0         at TRISD : 0
var volatile bit   PIN_D0_DIRECTION     at TRISD : 0
-- ------------------------------------------------
var volatile byte  TRISE                at { 0x89 }
var volatile byte  PORT_E_DIRECTION     at TRISE
--
procedure PORT_E_LOW_DIRECTION'put(byte in x) is
  TRISE = (TRISE & 0xF0) | (x & 0x0F)
end procedure
function PORT_E_LOW_DIRECTION'get return byte is
  return TRISE & 0x0F
end function
--
procedure PORT_E_HIGH_DIRECTION'put(byte in x) is
  TRISE = (TRISE & 0x0F) | (x << 4)
end procedure
function PORT_E_HIGH_DIRECTION'get return byte is
  return (TRISE >> 4)
end function
--
var volatile bit   TRISE_TRISE3         at TRISE : 3
var volatile bit   PIN_E3_DIRECTION     at TRISE : 3
var volatile bit   TRISE_TRISE2         at TRISE : 2
var volatile bit   PIN_E2_DIRECTION     at TRISE : 2
var volatile bit   TRISE_TRISE1         at TRISE : 1
var volatile bit   PIN_E1_DIRECTION     at TRISE : 1
var volatile bit   TRISE_TRISE0         at TRISE : 0
var volatile bit   PIN_E0_DIRECTION     at TRISE : 0
-- ------------------------------------------------
var volatile byte  PIE1                 at { 0x8C }
var volatile bit   PIE1_TMR1GIE         at PIE1 : 7
var volatile bit   PIE1_ADIE            at PIE1 : 6
var volatile bit   PIE1_RCIE            at PIE1 : 5
var volatile bit   PIE1_TXIE            at PIE1 : 4
var volatile bit   PIE1_SSPIE           at PIE1 : 3
var volatile bit   PIE1_CCP1IE          at PIE1 : 2
var volatile bit   PIE1_TMR2IE          at PIE1 : 1
var volatile bit   PIE1_TMR1IE          at PIE1 : 0
-- ------------------------------------------------
var volatile byte  PIE2                 at { 0x8D }
var volatile bit   PIE2_CCP2IE          at PIE2 : 0
-- ------------------------------------------------
var volatile byte  PCON                 at { 0x8E }
var volatile bit   PCON_NPOR            at PCON : 1
var volatile bit   PCON_NBOR            at PCON : 0
-- ------------------------------------------------
var volatile byte  T1GCON               at { 0x8F }
var volatile bit   T1GCON_TMR1GE        at T1GCON : 7
var volatile bit   T1GCON_T1GPOL        at T1GCON : 6
var volatile bit   T1GCON_T1GTM         at T1GCON : 5
var volatile bit   T1GCON_T1G1SE        at T1GCON : 4
var volatile bit   T1GCON_T1GGO         at T1GCON : 3
var volatile bit   T1GCON_NDONE         at T1GCON : 3
var volatile bit   T1GCON_T1GVAL        at T1GCON : 2
var volatile bit*2 T1GCON_T1GSS         at T1GCON : 0
-- ------------------------------------------------
var volatile byte  OSCCON               at { 0x90 }
var volatile bit*2 OSCCON_IRCF          at OSCCON : 4
var volatile bit   OSCCON_ICSL          at OSCCON : 3
var volatile bit   OSCCON_ICSS          at OSCCON : 2
-- ------------------------------------------------
var volatile byte  OSCTUNE              at { 0x91 }
var volatile bit*6 OSCTUNE_TUN          at OSCTUNE : 0
-- ------------------------------------------------
var volatile byte  PR2                  at { 0x92 }
-- ------------------------------------------------
var volatile byte  SSPADD               at { 0x93 }
-- ------------------------------------------------
var volatile byte  SSPSTAT              at { 0x94 }
var volatile bit   SSPSTAT_SMP          at SSPSTAT : 7
var volatile bit   SSPSTAT_CKE          at SSPSTAT : 6
var volatile bit   SSPSTAT_D            at SSPSTAT : 5
var volatile bit   SSPSTAT_NA           at SSPSTAT : 5
var volatile bit   SSPSTAT_P            at SSPSTAT : 4
var volatile bit   SSPSTAT_S            at SSPSTAT : 3
var volatile bit   SSPSTAT_R            at SSPSTAT : 2
var volatile bit   SSPSTAT_NW           at SSPSTAT : 2
var volatile bit   SSPSTAT_UA           at SSPSTAT : 1
var volatile bit   SSPSTAT_BF           at SSPSTAT : 0
-- ------------------------------------------------
var volatile byte  WPUB                 at { 0x95 }
-- ------------------------------------------------
var volatile byte  IOCB                 at { 0x96 }
-- ------------------------------------------------
var volatile byte  TXSTA                at { 0x98 }
var volatile bit   TXSTA_CSRC           at TXSTA : 7
var volatile bit   TXSTA_TX9            at TXSTA : 6
var volatile bit   TXSTA_TXEN           at TXSTA : 5
var volatile bit   TXSTA_SYNC           at TXSTA : 4
var volatile bit   TXSTA_BRGH           at TXSTA : 2
var volatile bit   TXSTA_TRMT           at TXSTA : 1
var volatile bit   TXSTA_TX9D           at TXSTA : 0
-- ------------------------------------------------
var volatile byte  SPBRG                at { 0x99 }
-- ------------------------------------------------
var volatile byte  APFCON               at { 0x9C }
var volatile bit   APFCON_SSSEL         at APFCON : 1
var volatile bit   APFCON_CCP2SEL       at APFCON : 0
-- ------------------------------------------------
var volatile byte  FVRCON               at { 0x9D }
var volatile bit   FVRCON_FVRRDY        at FVRCON : 7
var volatile bit   FVRCON_FVREN         at FVRCON : 6
var volatile bit   FVRCON_ADFVR1        at FVRCON : 1
var volatile bit   FVRCON_ADFVR0        at FVRCON : 0
-- ------------------------------------------------
var volatile byte  ADCON1               at { 0x9F }
var volatile bit*3 ADCON1_ADCS          at ADCON1 : 4
var volatile bit*2 ADCON1_ADREF         at ADCON1 : 0
-- ------------------------------------------------
var volatile byte  CPSCON0              at { 0x108 }
var volatile bit   CPSCON0_CPSON        at CPSCON0 : 7
var volatile bit*2 CPSCON0_CPSRNG       at CPSCON0 : 2
var volatile bit   CPSCON0_CPSOUT       at CPSCON0 : 1
var volatile bit   CPSCON0_T0XCS        at CPSCON0 : 0
-- ------------------------------------------------
var volatile byte  CPSCON1              at { 0x109 }
var volatile bit*4 CPSCON1_CPSCH        at CPSCON1 : 0
-- ------------------------------------------------
var volatile byte  PMDATL               at { 0x10C }
-- ------------------------------------------------
var volatile byte  PMADRL               at { 0x10D }
-- ------------------------------------------------
var volatile byte  PMDATH               at { 0x10E }
-- ------------------------------------------------
var volatile byte  PMADRH               at { 0x10F }
-- ------------------------------------------------
var volatile byte  ANSELA               at { 0x185 }
var volatile bit*6 ANSELA_ANSA          at ANSELA : 0
-- ------------------------------------------------
var volatile byte  ANSELB               at { 0x186 }
var volatile bit*6 ANSELB_ANSB          at ANSELB : 0
-- ------------------------------------------------
var volatile byte  ANSELD               at { 0x188 }
var volatile byte  ANSELD_ANSD          at ANSELD    -- alias
-- ------------------------------------------------
var volatile byte  ANSELE               at { 0x189 }
var volatile bit*3 ANSELE_ANSE          at ANSELE : 0
-- ------------------------------------------------
var volatile byte  PMCON1               at { 0x18C }
var volatile bit   PMCON1_RD            at PMCON1 : 0
--
-- ===================================================
-- Special device dependent procedures/functions
--
-- ---------------------------------------------------
-- Change ports which have analog function by default
-- into digital I/O.
-- Note: May not be complete!
--
procedure enable_digital_io() is
--pragma inline  (temporary disabled) */
  ANSELA = 0b0000_0000         -- disable analog I/O
  ANSELB = 0b0000_0000
  ADCON0 = 0b0000_0000         -- disable ADC
  ADCON1 = 0b0000_0111         -- digital I/O
end procedure
--
--
-- ==================================================
--
-- Symbolic Fuse definitions
-- -------------------------
--
-- addr 0x2007
--
pragma fuse_def OSC:0 0x7 {
       EXTOSC_CLKOUT = 0x7
       EXTOSC_NOCLKOUT = 0x6
       INTOSC_CLKOUT = 0x5
       INTOSC_NOCLKOUT = 0x4
       EC_NOCLKOUT = 0x3
       HS = 0x2
       XT = 0x1
       LP = 0x0
       }
pragma fuse_def WDT:0 0x8 {
       ENABLED = 0x8
       DISABLED = 0x0
       }
pragma fuse_def NPWRTE:0 0x10 {
       DISABLED = 0x10
       ENABLED = 0x0
       }
pragma fuse_def MCLR:0 0x20 {
       INTERNAL = 0x0
       EXTERNAL = 0x20
       }
pragma fuse_def CP:0 0x40 {
       DISABLED = 0x40
       ENABLED = 0x0
       }
pragma fuse_def RES:0 0x80 {
       RESERVED = 0x80
       }
pragma fuse_def BROWNOUT:0 0x300 {
       DISABLED = 0x0
       DISABLED = 0x100
       RUNONLY = 0x200
       ENABLED = 0x300
       }
pragma fuse_def VOLTAGE:0 0x400 {
       V19 = 0x400
       V25 = 0x0
       }
pragma fuse_def WDT:0 0x800 {
       STANDARD_WATCHDOG_TIMER_IS_SELECTED = 0x800
       LOW_POWER_WATCHDOG_TIMER_IS_SELECTED = 0x0
       }
pragma fuse_def PLLEN:0 0x1000 {
       _16MHZ = 0x1000
       _500KHZ = 0x0
       }
pragma fuse_def DEBUG:0 0x2000 {
       DISABLED = 0x2000
       ENABLED = 0x0
       }
--
-- addr 0x2008
--
pragma fuse_def VCAPEN:1 0x30 {
       ALL_VCAP_PIN_FUNCTIONS_ARE_DISABLED = 0x30
       VCAP_FUNCTIONALITY_IS_ENABLED_ON_RA6 = 0x20
       VCAP_FUNCTIONALITY_IS_ENABLED_ON_RA5 = 0x10
       VCAP_FUNCTIONALITY_IS_ENABLED_ON_RA0 = 0x0
       }
--
