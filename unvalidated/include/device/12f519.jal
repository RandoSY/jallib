-- ===================================================
-- Title: JalV2 device include file for pic12f519
--
-- Author: Rob Hamerling, Copyright (c) 2008..2008, all rights reserved.
--
-- Adapted-by:
--
-- Compiler: >=2.4g
--
-- This file is part of jallib  (http://jallib.googlecode.com)
-- Released under the BSD license (http://www.opensource.org/licenses/bsd-license.php)
--
-- Description: Device include file for pic12f519, containing:
--                - Declaration of ports and pins of the chip.
--                - Procedures for shadowing of ports and pins
--                  to circumvent the read-modify-write problem.
--                - Symbolic definitions for config bits (fuses)
--                - Some device dependent procedures for common
--                  operations, like:
--                   . enable-digital-io.
--
-- Sources:
--  - x:/mplab814/mplab_ide/device/pic12f519.dev
--  - x:/mplab814/mpasm_suite/lkr/12f519_g.lkr
--
-- Notes:
--  - Created with Dev2Jal Rexx script version 0.0.40
--  - File creation date/time: 14 Aug 2008 20:57:35.
--
-- ===================================================
--
-- Vdd Range: 2.000-5.500 Nominal: 5.000
-- Vpp Range: 10.000-12.000 Default: 11.000
--
-- ---------------------------------------------------
--
include chipdef                     -- common constants
--
pragma  target  cpu   pic_12    -- (banks = 2)
pragma  target  chip  12f519
pragma  target  bank  0x0020
pragma  target  page  0x0200
pragma  stack   2
pragma  code    1024
pragma  data    0x10-0x1F,0x30-0x3F
pragma  shared  0x07-0x0F
--
var volatile byte _pic_accum shared at { 0xE,0x2E }   -- (compiler)
var volatile byte _pic_isr_w shared at { 0xF,0x2F }   -- (compiler)
--
const word  _fuses_ct             = 1
const word  _fuse_base            = 0xFFF
const word  _fuses                = 0xFFF
--
const word  _ID_ct                = 4
const word  _ID_base[_ID_ct]      = { 0x0440,0x0441,0x0442,0x0443 }
const word  _ID[_ID_ct]           = { 0x0000,0x0000,0x0000,0x0000 }
--
-- ------------------------------------------------
var volatile byte  INDF                 at { 0x0,0x20 }
var volatile byte  _ind                 at { 0x0,0x20 }      -- (compiler)
-- ------------------------------------------------
var volatile byte  TMR0                 at { 0x1 }
-- ------------------------------------------------
var volatile byte  PCL                  at { 0x2 }
var volatile byte  _pcl                 at { 0x2 }      -- (compiler)
-- ------------------------------------------------
var volatile byte  STATUS               at { 0x3 }
var volatile bit   STATUS_RBWUF         at STATUS : 7
var volatile bit   STATUS_PA0           at STATUS : 5
var volatile bit   STATUS_NTO           at STATUS : 4
var volatile bit   STATUS_NPD           at STATUS : 3
var volatile bit   STATUS_Z             at STATUS : 2
var volatile bit   STATUS_DC            at STATUS : 1
var volatile bit   STATUS_C             at STATUS : 0
var volatile byte  _status              at { 0x3 }      -- (compiler)
const        byte  _rbwuf               =  7      -- (compiler)
const        byte  _pa0                 =  5      -- (compiler)
const        byte  _not_to              =  4      -- (compiler)
const        byte  _not_pd              =  3      -- (compiler)
const        byte  _z                   =  2      -- (compiler)
const        byte  _dc                  =  1      -- (compiler)
const        byte  _c                   =  0      -- (compiler)
-- ------------------------------------------------
var volatile byte  FSR                  at { 0x4 }
var volatile byte  _fsr                 at { 0x4 }      -- (compiler)
-- ------------------------------------------------
var volatile byte  OSCCAL               at { 0x5 }
var volatile bit*7 OSCCAL_CAL           at OSCCAL : 1
-- ------------------------------------------------
var volatile byte  PORTB                at { 0x6 }
--
var          byte  _PORTB_SHADOW        = PORTB
--
procedure _portB_flush is
  pragma inline
  PORTB = _PORTB_SHADOW
end procedure
--
procedure PORTB'put (byte in x) is
  pragma inline
  _PORTB_SHADOW = x
  _portB_flush
end procedure
--
var  byte PORTB_LOW
procedure PORTB_LOW'put(byte in x) is
  _PORTB_SHADOW = (_PORTB_SHADOW & 0xF0) | (x & 0x0F)
  _portB_flush
end procedure
function PORTB_LOW'get return byte is
  return PORTB & 0x0F
end function
--
var  byte PORTB_HIGH
procedure PORTB_HIGH'put(byte in x) is
  _PORTB_SHADOW = (_PORTB_SHADOW & 0x0F) | (x << 4)
  _portB_flush
end procedure
function PORTB_HIGH'get return byte is
  return PORTB >> 4
end function
--
var volatile bit   PORTB_RB5            at PORTB : 5
var volatile bit   PIN_B5               at PORTB : 5
procedure PIN_B5'put(bit in x) is
  pragma inline
  var bit _Tmp_Bit at _PORTB_SHADOW : 5
  _Tmp_Bit = x
  _portB_flush
end procedure
--
var volatile bit   PORTB_RB4            at PORTB : 4
var volatile bit   PIN_B4               at PORTB : 4
procedure PIN_B4'put(bit in x) is
  pragma inline
  var bit _Tmp_Bit at _PORTB_SHADOW : 4
  _Tmp_Bit = x
  _portB_flush
end procedure
--
var volatile bit   PORTB_RB3            at PORTB : 3
var volatile bit   PIN_B3               at PORTB : 3
procedure PIN_B3'put(bit in x) is
  pragma inline
  var bit _Tmp_Bit at _PORTB_SHADOW : 3
  _Tmp_Bit = x
  _portB_flush
end procedure
--
var volatile bit   PORTB_RB2            at PORTB : 2
var volatile bit   PIN_B2               at PORTB : 2
procedure PIN_B2'put(bit in x) is
  pragma inline
  var bit _Tmp_Bit at _PORTB_SHADOW : 2
  _Tmp_Bit = x
  _portB_flush
end procedure
--
var volatile bit   PORTB_RB1            at PORTB : 1
var volatile bit   PIN_B1               at PORTB : 1
procedure PIN_B1'put(bit in x) is
  pragma inline
  var bit _Tmp_Bit at _PORTB_SHADOW : 1
  _Tmp_Bit = x
  _portB_flush
end procedure
--
var volatile bit   PORTB_RB0            at PORTB : 0
var volatile bit   PIN_B0               at PORTB : 0
procedure PIN_B0'put(bit in x) is
  pragma inline
  var bit _Tmp_Bit at _PORTB_SHADOW : 0
  _Tmp_Bit = x
  _portB_flush
end procedure
--
-- ------------------------------------------------
var volatile byte  EECON                at { 0x21 }
var volatile bit   EECON_FREE           at EECON : 4
var volatile bit   EECON_WRERR          at EECON : 3
var volatile bit   EECON_WREN           at EECON : 2
var volatile bit   EECON_WR             at EECON : 1
var volatile bit   EECON_RD             at EECON : 0
-- ------------------------------------------------
var volatile byte  EEDATA               at { 0x25 }
-- ------------------------------------------------
var volatile byte  EEADR                at { 0x26 }
--
-- ===================================================
-- Special device dependent procedures
--
-- ---------------------------------------------------
-- Change ports which have analog function by default
-- into digital I/O.
--
procedure enable_digital_io() is
  pragma inline
end procedure
--
--
-- ==================================================
--
-- Symbolic Fuse definitions
-- -------------------------
--
-- addr 0xFFF
--
pragma fuse_def OSC 0x3 {
       LP = 0x0
       XT = 0x1
       INTOSC_NOCLKOUT = 0x2
       EXTOSC_NOCLKOUT = 0x3
       }
pragma fuse_def WDT 0x4 {
       ENABLED = 0x4
       DISABLED = 0x0
       }
pragma fuse_def CP 0x8 {
       DISABLED = 0x8
       ENABLED = 0x0
       }
pragma fuse_def MCLR 0x10 {
       EXTERNAL = 0x10
       INTERNAL = 0x0
       }
pragma fuse_def IOSCFS 0x20 {
       _8_MHZ_INTOSC_SPEED = 0x20
       _4_MHZ_INTOSC_SPEED = 0x0
       }
pragma fuse_def CPSW 0x40 {
       DISABLED = 0x40
       ENABLED = 0x0
       }
--
