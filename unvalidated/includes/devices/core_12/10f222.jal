-- ===================================================
-- JALV2 PICmicro specifications for 10F222
--
-- (c) Copyright 2008..2008. Rob Hamerling. All rights reserved.
-- Adapted by:
--
-- Compiler version >= JalV2.4g
--
-- This file is part of jallib (http://jallib.googlecode.com)
-- Released under the BSD license (http://www.opensource.org/licenses/bsd-license.php)
--
-- Created with Dev2Jal Rexx script version 0.0.32
-- File creation date/time: 3 Aug 2008 20:03:32.
--
-- Sources of information:
--  - x:/mplab814/mplab_ide/device/PIC10F222.dev
--  - x:/mplab814/mpasm_suite/lkr/10F222_g.lkr
--
-- ---------------------------------------------------
--
-- DataSheet: DS-41270
-- Vdd Range: 2.000-5.500 Nominal: 5.000
-- Vpp Range: 10.000-12.000 Default: 11.000
--
-- ===================================================
--
include chipdef                     -- common constants
--
pragma  target  cpu   pic_12    -- (banks = 1)
pragma  target  chip  10F222
pragma  target  bank  0x0020
pragma  target  page  0x0200
pragma  stack   2
pragma  code    512
pragma  data    0x09-0x1F
--
var volatile byte _pic_accum at { 0x1E }   -- (compiler)
var volatile byte _pic_isr_w at { 0x1F }   -- (compiler)
--
const word  _fuses_ct             = 1
const word  _fuse_base            = 0xFFF
const word  _fuses                = 0xFFF
--
const word  _ID_ct                = 4
const word  _ID_base[_ID_ct]      = { 0x0200,0x0201,0x0202,0x0203 }
const word  _ID[_ID_ct]           = { 0x0000,0x0000,0x0000,0x0000 }
--
-- ------------------------------------------------
var volatile byte  INDF                 at { 0x0 }
var volatile byte  _ind                 at { 0x0 }      -- (compiler)
-- ------------------------------------------------
var volatile byte  TMR0                 at { 0x1 }
-- ------------------------------------------------
var volatile byte  PCL                  at { 0x2 }
var volatile byte  _pcl                 at { 0x2 }      -- (compiler)
-- ------------------------------------------------
var volatile byte  STATUS               at { 0x3 }
var volatile bit   STATUS_GPWUF         at STATUS : 7
var volatile bit   STATUS_NTO           at STATUS : 4
var volatile bit   STATUS_NPD           at STATUS : 3
var volatile bit   STATUS_Z             at STATUS : 2
var volatile bit   STATUS_DC            at STATUS : 1
var volatile bit   STATUS_C             at STATUS : 0
var volatile byte  _status              at { 0x3 }      -- (compiler)
const        byte  _gpwuf               =  7      -- (compiler)
const        byte  _not_to              =  4      -- (compiler)
const        byte  _not_pd              =  3      -- (compiler)
const        byte  _z                   =  2      -- (compiler)
const        byte  _dc                  =  1      -- (compiler)
const        byte  _c                   =  0      -- (compiler)
-- ------------------------------------------------
var volatile byte  FSR                  at { 0x4 }
var volatile byte  _fsr                 at { 0x4 }      -- (compiler)
-- ------------------------------------------------
var volatile byte  OSCCAL               at { 0x5 }
var volatile bit*7 OSCCAL_CAL           at OSCCAL : 1
var volatile bit   OSCCAL_FOSC4         at OSCCAL : 0
-- ------------------------------------------------
var volatile byte  GPIO                 at { 0x6 }
var volatile byte  PORTA                at GPIO
--
var          byte  _port_A_shadow        = PORTA
--
procedure _port_A_flush is
  pragma inline
  PORTA = _port_A_shadow
end procedure
--
procedure portA'put (byte in x) is
  pragma inline
  _port_A_shadow = x
  _port_A_flush
end procedure
--
var  byte port_A_low
procedure port_A_low'put(byte in x) is
  _port_A_shadow = (_port_A_shadow & 0xF0) | (x & 0x0F)
  _port_A_flush
end procedure
function port_A_low'get return byte is
  return PORTA & 0x0F
end function
--
var  byte port_A_high
procedure port_A_high'put(byte in x) is
  _port_A_shadow = (_port_A_shadow & 0x0F) | (x << 4)
  _port_A_flush
end procedure
function port_A_high'get return byte is
  return PORTA >> 4
end function
--
var volatile bit   GPIO_GPIO3           at GPIO : 3
var volatile bit   pin_A3               at GPIO : 3
procedure pin_A3'put(bit in x) is
  pragma inline
  var bit _Tmp_Bit at _port_A_shadow : 3
  _Tmp_Bit = x
  _port_A_flush
end procedure
--
var volatile bit   GPIO_GPIO2           at GPIO : 2
var volatile bit   pin_A2               at GPIO : 2
procedure pin_A2'put(bit in x) is
  pragma inline
  var bit _Tmp_Bit at _port_A_shadow : 2
  _Tmp_Bit = x
  _port_A_flush
end procedure
--
var volatile bit   GPIO_GPIO1           at GPIO : 1
var volatile bit   pin_A1               at GPIO : 1
procedure pin_A1'put(bit in x) is
  pragma inline
  var bit _Tmp_Bit at _port_A_shadow : 1
  _Tmp_Bit = x
  _port_A_flush
end procedure
--
var volatile bit   GPIO_GPIO0           at GPIO : 0
var volatile bit   pin_A0               at GPIO : 0
procedure pin_A0'put(bit in x) is
  pragma inline
  var bit _Tmp_Bit at _port_A_shadow : 0
  _Tmp_Bit = x
  _port_A_flush
end procedure
--
-- ------------------------------------------------
var volatile byte  ADCON0               at { 0x7 }
var volatile bit*2 ADCON0_ANS           at ADCON0 : 6
var volatile bit*2 ADCON0_CHS           at ADCON0 : 2
var volatile bit   ADCON0_GO            at ADCON0 : 1
var volatile bit   ADCON0_NDONE         at ADCON0 : 1
var volatile bit   ADCON0_ADON          at ADCON0 : 0
-- ------------------------------------------------
var volatile byte  ADRES                at { 0x8 }
--
-- ===================================================
-- Special device dependent procedures/functions
--
-- ---------------------------------------------------
-- Change ports which have analog function by default
-- to digital I/O.
-- Note: May not be complete!
--
procedure enable_digital_IO is
  pragma inline
  ADCON0 = 0b0000_0000         -- disable ADC
end procedure
--
--
-- ==================================================
--
-- Symbolic Fuse definitions
-- -------------------------
--
-- addr 0xFFF
--
pragma fuse_def IOFSCS 0x1 {
       _8_MHZ = 0x1
       _4_MHZ = 0x0
       }
pragma fuse_def MCPU 0x2 {
       DISABLED = 0x2
       ENABLED = 0x0
       }
pragma fuse_def WDT 0x4 {
       ENABLED = 0x4
       DISABLED = 0x0
       }
pragma fuse_def CP 0x8 {
       DISABLED = 0x8
       ENABLED = 0x0
       }
pragma fuse_def MCLR 0x10 {
       EXTERNAL = 0x10
       INTERNAL = 0x0
       }
--
