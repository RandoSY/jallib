-- ===================================================
-- JALV2 PICmicro specifications for 16F57
--
-- (c) Copyright 2008..2008. Rob Hamerling. All rights reserved.
-- Adapted by:
--
-- Compiler version >= JalV2.4g
--
-- This file is part of jallib (http://jallib.googlecode.com)
-- Released under the BSD license (http://www.opensource.org/licenses/bsd-license.php)
--
-- Created with Dev2Jal Rexx script version 0.0.34
-- File creation date/time: 5 Aug 2008 15:37:41.
--
-- Sources of information:
--  - x:/mplab814/mplab_ide/device/PIC16F57.dev
--  - x:/mplab814/mpasm_suite/lkr/16F57_g.lkr
--
-- ---------------------------------------------------
--
-- DataSheet: DS-41213
-- Programming Specifications: DS-41208
-- Vdd Range: 2.000-5.500 Nominal: 5.000
-- Vpp Range: 10.000-12.000 Default: 11.000
--
-- ===================================================
--
include chipdef                     -- common constants
--
pragma  target  cpu   pic_12    -- (banks = 4)
pragma  target  chip  16F57
pragma  target  bank  0x0020
pragma  target  page  0x0200
pragma  stack   2
pragma  code    2048
pragma  data    0x10-0x1F,0x30-0x3F,0x50-0x5F,0x70-0x7F
pragma  shared  0x8-0xF
--
var volatile byte _pic_accum shared at { 0xE,0x2E,0x4E,0x6E }   -- (compiler)
var volatile byte _pic_isr_w shared at { 0xF,0x2F,0x4F,0x6F }   -- (compiler)
--
const word  _fuses_ct             = 1
const word  _fuse_base            = 0xFFF
const word  _fuses                = 0xFFF
--
const word  _ID_ct                = 4
const word  _ID_base[_ID_ct]      = { 0x0800,0x0801,0x0802,0x0803 }
const word  _ID[_ID_ct]           = { 0x0000,0x0000,0x0000,0x0000 }
--
-- ------------------------------------------------
var volatile byte  INDF                 at { 0x0,0x20,0x40,0x60 }
var volatile byte  _ind                 at { 0x0,0x20,0x40,0x60 }      -- (compiler)
-- ------------------------------------------------
var volatile byte  TMR0                 at { 0x1,0x21,0x41,0x61 }
-- ------------------------------------------------
var volatile byte  PCL                  at { 0x2,0x22,0x42,0x62 }
var volatile byte  _pcl                 at { 0x2,0x22,0x42,0x62 }      -- (compiler)
-- ------------------------------------------------
var volatile byte  STATUS               at { 0x3,0x23,0x43,0x63 }
var volatile bit*3 STATUS_PA            at STATUS : 5
var volatile bit   STATUS_NTO           at STATUS : 4
var volatile bit   STATUS_NPD           at STATUS : 3
var volatile bit   STATUS_Z             at STATUS : 2
var volatile bit   STATUS_DC            at STATUS : 1
var volatile bit   STATUS_C             at STATUS : 0
var volatile byte  _status              at { 0x3,0x23,0x43,0x63 }      -- (compiler)
const        byte  _PA2                 =  7      -- (compiler)
const        byte  _PA1                 =  6      -- (compiler)
const        byte  _PA0                 =  5      -- (compiler)
const        byte  _not_to              =  4      -- (compiler)
const        byte  _not_pd              =  3      -- (compiler)
const        byte  _z                   =  2      -- (compiler)
const        byte  _dc                  =  1      -- (compiler)
const        byte  _c                   =  0      -- (compiler)
-- ------------------------------------------------
var volatile byte  FSR                  at { 0x4,0x24,0x44,0x64 }
var volatile byte  _fsr                 at { 0x4,0x24,0x44,0x64 }      -- (compiler)
-- ------------------------------------------------
var volatile byte  PORTA                at { 0x5,0x25,0x45,0x65 }
--
var          byte  _port_A_shadow        = PORTA
--
procedure _port_A_flush is
  pragma inline
  PORTA = _port_A_shadow
end procedure
--
procedure portA'put (byte in x) is
  pragma inline
  _port_A_shadow = x
  _port_A_flush
end procedure
--
var  byte port_A_low
procedure port_A_low'put(byte in x) is
  _port_A_shadow = (_port_A_shadow & 0xF0) | (x & 0x0F)
  _port_A_flush
end procedure
function port_A_low'get return byte is
  return PORTA & 0x0F
end function
--
var  byte port_A_high
procedure port_A_high'put(byte in x) is
  _port_A_shadow = (_port_A_shadow & 0x0F) | (x << 4)
  _port_A_flush
end procedure
function port_A_high'get return byte is
  return PORTA >> 4
end function
--
var volatile bit   PORTA_T0CKI          at PORTA : 4
var volatile bit   PORTA_RA3            at PORTA : 3
var volatile bit   pin_A3               at PORTA : 3
procedure pin_A3'put(bit in x) is
  pragma inline
  var bit _Tmp_Bit at _port_A_shadow : 3
  _Tmp_Bit = x
  _port_A_flush
end procedure
--
var volatile bit   PORTA_RA2            at PORTA : 2
var volatile bit   pin_A2               at PORTA : 2
procedure pin_A2'put(bit in x) is
  pragma inline
  var bit _Tmp_Bit at _port_A_shadow : 2
  _Tmp_Bit = x
  _port_A_flush
end procedure
--
var volatile bit   PORTA_RA1            at PORTA : 1
var volatile bit   pin_A1               at PORTA : 1
procedure pin_A1'put(bit in x) is
  pragma inline
  var bit _Tmp_Bit at _port_A_shadow : 1
  _Tmp_Bit = x
  _port_A_flush
end procedure
--
var volatile bit   PORTA_RA0            at PORTA : 0
var volatile bit   pin_A0               at PORTA : 0
procedure pin_A0'put(bit in x) is
  pragma inline
  var bit _Tmp_Bit at _port_A_shadow : 0
  _Tmp_Bit = x
  _port_A_flush
end procedure
--
-- ------------------------------------------------
var volatile byte  PORTB                at { 0x6,0x26,0x46,0x66 }
--
var          byte  _port_B_shadow        = PORTB
--
procedure _port_B_flush is
  pragma inline
  PORTB = _port_B_shadow
end procedure
--
procedure portB'put (byte in x) is
  pragma inline
  _port_B_shadow = x
  _port_B_flush
end procedure
--
var  byte port_B_low
procedure port_B_low'put(byte in x) is
  _port_B_shadow = (_port_B_shadow & 0xF0) | (x & 0x0F)
  _port_B_flush
end procedure
function port_B_low'get return byte is
  return PORTB & 0x0F
end function
--
var  byte port_B_high
procedure port_B_high'put(byte in x) is
  _port_B_shadow = (_port_B_shadow & 0x0F) | (x << 4)
  _port_B_flush
end procedure
function port_B_high'get return byte is
  return PORTB >> 4
end function
--
var volatile bit   PORTB_RB7            at PORTB : 7
var volatile bit   pin_B7               at PORTB : 7
procedure pin_B7'put(bit in x) is
  pragma inline
  var bit _Tmp_Bit at _port_B_shadow : 7
  _Tmp_Bit = x
  _port_B_flush
end procedure
--
var volatile bit   PORTB_RB6            at PORTB : 6
var volatile bit   pin_B6               at PORTB : 6
procedure pin_B6'put(bit in x) is
  pragma inline
  var bit _Tmp_Bit at _port_B_shadow : 6
  _Tmp_Bit = x
  _port_B_flush
end procedure
--
var volatile bit   PORTB_RB5            at PORTB : 5
var volatile bit   pin_B5               at PORTB : 5
procedure pin_B5'put(bit in x) is
  pragma inline
  var bit _Tmp_Bit at _port_B_shadow : 5
  _Tmp_Bit = x
  _port_B_flush
end procedure
--
var volatile bit   PORTB_RB4            at PORTB : 4
var volatile bit   pin_B4               at PORTB : 4
procedure pin_B4'put(bit in x) is
  pragma inline
  var bit _Tmp_Bit at _port_B_shadow : 4
  _Tmp_Bit = x
  _port_B_flush
end procedure
--
var volatile bit   PORTB_RB3            at PORTB : 3
var volatile bit   pin_B3               at PORTB : 3
procedure pin_B3'put(bit in x) is
  pragma inline
  var bit _Tmp_Bit at _port_B_shadow : 3
  _Tmp_Bit = x
  _port_B_flush
end procedure
--
var volatile bit   PORTB_RB2            at PORTB : 2
var volatile bit   pin_B2               at PORTB : 2
procedure pin_B2'put(bit in x) is
  pragma inline
  var bit _Tmp_Bit at _port_B_shadow : 2
  _Tmp_Bit = x
  _port_B_flush
end procedure
--
var volatile bit   PORTB_RB1            at PORTB : 1
var volatile bit   pin_B1               at PORTB : 1
procedure pin_B1'put(bit in x) is
  pragma inline
  var bit _Tmp_Bit at _port_B_shadow : 1
  _Tmp_Bit = x
  _port_B_flush
end procedure
--
var volatile bit   PORTB_RB0            at PORTB : 0
var volatile bit   pin_B0               at PORTB : 0
procedure pin_B0'put(bit in x) is
  pragma inline
  var bit _Tmp_Bit at _port_B_shadow : 0
  _Tmp_Bit = x
  _port_B_flush
end procedure
--
-- ------------------------------------------------
var volatile byte  PORTC                at { 0x7,0x27,0x47,0x67 }
--
var          byte  _port_C_shadow        = PORTC
--
procedure _port_C_flush is
  pragma inline
  PORTC = _port_C_shadow
end procedure
--
procedure portC'put (byte in x) is
  pragma inline
  _port_C_shadow = x
  _port_C_flush
end procedure
--
var  byte port_C_low
procedure port_C_low'put(byte in x) is
  _port_C_shadow = (_port_C_shadow & 0xF0) | (x & 0x0F)
  _port_C_flush
end procedure
function port_C_low'get return byte is
  return PORTC & 0x0F
end function
--
var  byte port_C_high
procedure port_C_high'put(byte in x) is
  _port_C_shadow = (_port_C_shadow & 0x0F) | (x << 4)
  _port_C_flush
end procedure
function port_C_high'get return byte is
  return PORTC >> 4
end function
--
var volatile bit   PORTC_RC7            at PORTC : 7
var volatile bit   pin_C7               at PORTC : 7
procedure pin_C7'put(bit in x) is
  pragma inline
  var bit _Tmp_Bit at _port_C_shadow : 7
  _Tmp_Bit = x
  _port_C_flush
end procedure
--
var volatile bit   PORTC_RC6            at PORTC : 6
var volatile bit   pin_C6               at PORTC : 6
procedure pin_C6'put(bit in x) is
  pragma inline
  var bit _Tmp_Bit at _port_C_shadow : 6
  _Tmp_Bit = x
  _port_C_flush
end procedure
--
var volatile bit   PORTC_RC5            at PORTC : 5
var volatile bit   pin_C5               at PORTC : 5
procedure pin_C5'put(bit in x) is
  pragma inline
  var bit _Tmp_Bit at _port_C_shadow : 5
  _Tmp_Bit = x
  _port_C_flush
end procedure
--
var volatile bit   PORTC_RC4            at PORTC : 4
var volatile bit   pin_C4               at PORTC : 4
procedure pin_C4'put(bit in x) is
  pragma inline
  var bit _Tmp_Bit at _port_C_shadow : 4
  _Tmp_Bit = x
  _port_C_flush
end procedure
--
var volatile bit   PORTC_RC3            at PORTC : 3
var volatile bit   pin_C3               at PORTC : 3
procedure pin_C3'put(bit in x) is
  pragma inline
  var bit _Tmp_Bit at _port_C_shadow : 3
  _Tmp_Bit = x
  _port_C_flush
end procedure
--
var volatile bit   PORTC_RC2            at PORTC : 2
var volatile bit   pin_C2               at PORTC : 2
procedure pin_C2'put(bit in x) is
  pragma inline
  var bit _Tmp_Bit at _port_C_shadow : 2
  _Tmp_Bit = x
  _port_C_flush
end procedure
--
var volatile bit   PORTC_RC1            at PORTC : 1
var volatile bit   pin_C1               at PORTC : 1
procedure pin_C1'put(bit in x) is
  pragma inline
  var bit _Tmp_Bit at _port_C_shadow : 1
  _Tmp_Bit = x
  _port_C_flush
end procedure
--
var volatile bit   PORTC_RC0            at PORTC : 0
var volatile bit   pin_C0               at PORTC : 0
procedure pin_C0'put(bit in x) is
  pragma inline
  var bit _Tmp_Bit at _port_C_shadow : 0
  _Tmp_Bit = x
  _port_C_flush
end procedure
--
--
-- ===================================================
-- Special device dependent procedures/functions
--
-- ---------------------------------------------------
-- Change ports which have analog function by default
-- into digital I/O.
-- Note: May not be complete!
--
procedure enable_digital_io() is
  pragma inline
end procedure
--
--
-- ==================================================
--
-- Symbolic Fuse definitions
-- -------------------------
--
-- addr 0xFFF
--
pragma fuse_def OSC 0x3 {
       EXTOSC_NOCLKOUT = 0x3
       LP = 0x0
       XT = 0x1
       HS = 0x2
       }
pragma fuse_def WDT 0x4 {
       ENABLED = 0x4
       DISABLED = 0x0
       }
pragma fuse_def CP 0x8 {
       DISABLED = 0x8
       ENABLED = 0x0
       }
--
