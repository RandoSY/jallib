-- -----------------------------------------------------------------------------
-- <title Writes values to output device
-- <License                              
-- freeware, under the terms of the BSD-license
--  Copyright (C) 2007 Joep Suijs
-- mailto:jsuijs@yahoo.com
-- -----------------------------------------------------------------------------
-- <Description
-- Writes signed/unsiged bytes/words/dwords/strings/bool to the specified output device.
-- _decimal and _hex formats available.
--         
--    procedure print_crlf (device) 
--
--    procedure print_truefalse (device, bit in data) 
--    procedure print_highlow (device, bit in data) 
--
--    procedure print_dword_hex (device, byte in data) 
--    procedure print_word_hex (device, byte in data) 
--    procedure print_byte_hex (device, byte in data) 
--
--    procedure print_sdword_dec (device, data)
--    procedure print_sword_dec (device, data) 
--    procedure print_sbyte_dec (device, data) 
--
--    procedure print_dword_dec (device, data) 
--    procedure print_word_dec (device, data) 
--    procedure print_byte_dec (device, data) 
--
-- <Version: 1.0    ,04-07-2007, Joep Suijs
--    - orginal release
--
-- -----------------------------------------------------------------------------
-- -----------------------------------------------------------------------------


-- -----------------------------------------------------------------------------
-- <Example 
;
; var sword BHL = -684
;
; -- print_ the signed word to the LCD display
; print_sword_dec(LCD_char, BHL)
;
; -- and now print_ the same signed word to the serial port
; print_sword_dec(Serial_HW_data, BHL)
-- -----------------------------------------------------------------------------


-- <code

; prototypes
procedure print_nibble_hex (volatile byte out device, byte in data) 
procedure print_universal_dec (volatile byte out device, dword in data, sdword in digit_divisor, byte in digit_number)
procedure print_suniversal_dec (volatile byte out device, sdword in data, sdword in digit_divisor, byte in digit_number)

procedure print_crlf (volatile byte out device) is
   device = 13
   device = 10
end procedure

PROCEDURE print_string(volatile byte out device, byte IN str[]) IS
   var word len = count(str)
   var byte i
   
   for len using i loop
      device = str[i]
   end loop
      
end procedure

procedure print_bittruefalse (volatile byte out device, bit in data) is
   
   const byte str1[] = "true"   
   const byte str0[] = "false"   

   if (data) then
      print_String(device, str1)
   else
      print_String(device, str0)
   end if
         
end procedure

procedure print_bithighlow (volatile byte out device, bit in data) is
   
   const byte str1[] = "high"   
   const byte str0[] = "low"   

   if (data) then
      print_String(device, str1)
   else
      print_String(device, str0)
   end if
         
end procedure

procedure print_bit10 (volatile byte out device, bit in data) is
   
   if (data) then
      device = "1"
   else
      device = "0"
   end if
         
end procedure

procedure print_dword_hex (volatile byte out device, dword in data) is
   
   print_nibble_hex(device, byte(data>>28))
   print_nibble_hex(device, byte(data>>24))
   print_nibble_hex(device, byte(data>>20))
   print_nibble_hex(device, byte(data>>16))
   print_nibble_hex(device, byte(data>>12))
   print_nibble_hex(device, byte(data>>8))
   print_nibble_hex(device, byte(data>>4))
   print_nibble_hex(device, byte(data))
   
end procedure

procedure print_word_hex (volatile byte out device, word in data) is
   
   print_nibble_hex(device, byte(data>>12))
   print_nibble_hex(device, byte(data>>8))
   print_nibble_hex(device, byte(data>>4))
   print_nibble_hex(device, byte(data))
   
end procedure

procedure print_byte_hex (volatile byte out device, byte in data) is
   
   print_nibble_hex(device, byte(data>>4))
   print_nibble_hex(device, byte(data))
   
end procedure

procedure print_sdword_dec (volatile byte out device, sdword in data) is

   print_suniversal_dec(device, data, 1000000000, 10)

end procedure

procedure print_sword_dec (volatile byte out device, sword in data) is

   print_suniversal_dec(device, data, 10000, 5)

end procedure

procedure print_sbyte_dec (volatile byte out device, sbyte in data) is

   print_suniversal_dec(device, data, 100, 3)
      
end procedure

procedure print_dword_dec (volatile byte out device, dword in data) is

   print_universal_dec(device, data, 1000000000, 10)

end procedure

procedure print_word_dec (volatile byte out device, word in data) is

   print_universal_dec(device, data, 10000, 5)

end procedure

procedure print_byte_dec (volatile byte out device, byte in data) is

   print_universal_dec(device, data, 100, 3)
      
end procedure

; ------------------------------------------------------------------------
; ------------------------------------------------------------------------
; internal functions/procedures
; ------------------------------------------------------------------------
; ------------------------------------------------------------------------
procedure print_nibble_hex (volatile byte out device, byte in data) is
   
   data = data & 0x0F
   if (data < 10) then
      device = data + "0"
   else
      device = data + "A" - 10
   end if
   
end procedure


procedure print_suniversal_dec (volatile byte out device, sdword in data, sdword in digit_divisor, byte in digit_number) is
   var byte Digit
   var bit  NoDigitsprint_edYet;
   
   if (data < 0) then
      data = -data
      device = "-"      
   end if

   print_universal_dec(device, data, digit_divisor, digit_number)
      
end procedure


procedure print_universal_dec (volatile byte out device, dword in data, sdword in digit_divisor, byte in digit_number) is
   var byte Digit
   var bit  NoDigitsprint_edYet;
   
   if (data == 0) then
      device = "0"      
      return
   end if

   NoDigitsprint_edYet = true
   while (digit_divisor > 0) loop
      digit = byte ( data / digit_divisor )
      data = data % digit_divisor
      digit_divisor = digit_divisor / 10
      
      if ((digit != 0) | (NoDigitsprint_edYet == false)) then
         device = digit | "0"
         NoDigitsprint_edYet = false
      end if
      digit_number = digit_number - 1
   end loop
      
end procedure
