#summary jallib style guide, a recipe to write a standard jalv2 library
#labels Phase-Implementation

The *jallib style guide* defines the standards used to write jalv2 code. 

= Why ? =

There're many ways to write code, whatever the programming language is. Each language has its preferences. For instance, java prefers _CamelCase_ _whereas python prefers _underscore_lowercase_.

While this seems a real constraint, not necessarily needed, it actually helps a lot while sharing code with everyone: it improves *readability*, and readability is important because code is read much more often than it is written.

Finally, more than a howto write code, this guide is here to help you not forget things like _author(s)_, _licence_, and remember you some basic principles.


= Headers in library =

Every jal files published on this repository must have the following headers (comments), as the very beginning of the file:

{{{
-- [Title, small description]
-- Copyright (c) YEAR..YEAR, [author's name]
-- Adapted by: [adapter's name]
-- Compiler: [specify which version of compiler is needed. Ex: >= 2.4g, =2.3, ???]
-- 
-- This file is part of jallib (http://jallib.googlecode.com)
-- Released under the BSD license (http://www.opensource.org/licenses/bsd-license.php)
--
--

[code start here...]
}}}

The *author* is the original author's name. The library may have been modified and adapted by *adapters*. The *compiler* helps readers to know which compiler version is needed to use this file.

Example:

{{{
-- serial_hardware.jal, USART hardware control
-- Copyright (c) 2002..2006 Stef Mientki
-- Adapted by: Some One
-- Compiler: >= 2.3
-- 
-- This file is part of jallib (http://jallib.googlecode.com)
-- Released under the BSD license (http://www.opensource.org/licenses/bsd-license.php)
--
--
}}}


= Basic principles =

= Code Layout =

== Indent your code ==

It helps following the code structure (flows).

*Good*
{{{
var byte char
forever loop
    if serial_hw_read(char) then
        echo(char)
    end if
end loop
}}}

*Bad*
{{{
var byte char
forever loop
if serial_hw_read(char) then
echo(char)
end if
end loop
}}}

== Use lower_case_with_underscores ... ==

*Good*
{{{
var byte this_is_a_variable
var byte another_one
}}}

*Bad*
{{{
var byte ThisIsAVariable
var byte Another_One
}}}

== ... except for constants ==

*Good*
{{{
const RESET_CHAR = "*"
}}}

*Bad*
{{{
const reset_CHAR = "*"

}}}


DISCUSS: uppercase variables should be used for internal PIC function registers of for external PIN names, if they are uppercase in the datasheet as well.

== Inform readers what should be considered private ==

Functions, procedures, variables, etc... starting with an underscore is warning
to users saying "you shouldn't use me, I'm for internal use only". Play carefully with this, remember users are quite curious and may want them anyway :)

== Comment your code ==

It helps readers understand what's going on.
The comment should describe *why* your code does its thing, not what is does. That should be obvious from the code itself. 