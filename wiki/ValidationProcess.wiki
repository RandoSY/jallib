#summary how files are included in a release
#labels Phase-QA


The purpose of this document is to describe how files are included into a release. The whole SVN repository contains many libraries and samples, some are tested, some aren't, so here's the way we decide how a library or a sample goes to a release package.


== Validation criteria ==

All jal files must follow these rules:

 # *it must pass the JSG validator*
 # *it must compile against the jallib repository, without any warnings (and errors...)*
 # *if the file is a library, there must be at least one sample, available for at least one target chip*


== The validation process ==

 # each commiter is responsible enough to know when the time has come for his library or sample to be included in a release.
 # This means when there's a lot of debates on jallib's group, if people still disagree or have strong suggestions (about API, performances, implementation), then the file should *not* be included.
 # If everybody agree, and if the commiter feels he has enough tested it, then he adds the file' path into the *TORELEASE* file (sorted, please keep order).


Once enough (new or updated) files have been included, once everybody is happy, a new release _can_ be created. This can be done with `tools/Makefile`:

{{{
make release VERSION=the_version
}}}

The following steps are reproduced:

 # if a new release is created, a new svn branch is created, so we always have access to the release's content at this time. `svn copy https://jallib.googlecode.com/svn/trunk https://jallib.googlecode.com/svn/branches/jallib-the_version`
 # go to the branch (`svn checkout` it)
 # edit `tools/Makefile` and change `VERSION=dev` to `VERSION=the_version`. Also replace `trunk` by `branches/jallib-${VERSION}`. This way, one can checkout the branch, and simply `make release` to *exactly* produce the same release packages
 # edit CHANGELOG and replace "next" with the actual released version. Also prepare new CHANGELOG in trunk.
 # in order to setup DITA environment, go to your DITA_HOME and run ./start_cmd.sh
 # just to be sure the branch will contain up-to-date documentation, re-generate it with `make doc` (doc will also be generated from scratch for the packages)
 # then type `make release 2>&1 | tee release-the_version.log`. Wait a little. packages are available in `distrib` directory.
 # run `make check` to auto-check all packages, that is make sure all samples compile fine with packages' content
 # these tarball and zip files are uploaded to the *files* section of jallib google code project.
 # announce mail to jallist !!!