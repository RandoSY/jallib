#How to use a SVN repository as library source

= Using the SVN repository as library for JALV2 =

You have checked out your repository and now you have a lot of directories in /Users/me/jalv2/jallib. How do you use them?

Like this:


jalv2 -s `find /Users/me/jalv2/jallib  -type d | grep -v \.svn  | tr '\n' \;` prog.jal

Where /Users/me/jalv2/jallib points to your repository. prog.jal is the jal program you are trying to compile. This works in every directory.

== JALV2

Take care that the jalv2 copiler is somewhere on your PATH. If you are on a Mac, you probably installed a lot of stuff in /opt/local/bin if you used Macports. This is a fine location to store a copy of the compiler executable. On 

sudo cp jalv2 /opt/local/bin

Also, your jallib trunk is certainly not on /Users/eur/jalv2/jallib. Modify the command for the proper directory. Take special care of the quotes. 

Now if you are tired of typing above command to invoke the compiler, make a shell script named "j2" which contains:

jalv2 -s `find /Users/eur/jalv2/jallib  -type d | grep -v \.svn  | tr '\n' \;` $*

the last addition makes sure it feeds all yout command line arguments to the compiler. Again, modify the directory. 

The command to program the hex file can also be put in a shell script, for instance named xw:

python ~/freebsd/python/xwisp.py port /dev/tty.usbserial $*

Here too, point to the directory that houses the xwisp.py file. Put the serialposix.py file in that directory too. Oh, and use the serial port name your el-cheapo USB-serial converter generates. Make sure it exists in /dev

Dont forget to make the shell scripts executable:

chmod +x j2
chmod +x xw

Now you can compile with:

j2  jal_prog.jal

and program with:

xw go jal_prog.hex

